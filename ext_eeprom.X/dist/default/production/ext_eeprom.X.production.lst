

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sun Nov 25 01:55:42 2018

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    38                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    39  0000                     
    40                           ; Version 1.41
    41                           ; Generated 25/01/2017 GMT
    42                           ; 
    43                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC18F4520 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     
    75                           	psect	idataCOMRAM
    76  000EBE                     __pidataCOMRAM:
    77                           	opt stack 0
    78                           
    79                           ;initializer for _randx
    80  000EBE  0001               	dw	1
    81  000EC0  0000               	dw	0
    82                           
    83                           	psect	smallconst
    84  000600                     __psmallconst:
    85                           	opt stack 0
    86  000600  00                 	db	0
    87  000601                     _dpowers:
    88                           	opt stack 0
    89  000601  0001               	dw	1
    90  000603  000A               	dw	10
    91  000605  0064               	dw	100
    92  000607  03E8               	dw	1000
    93  000609  2710               	dw	10000
    94  00060B                     __end_of_dpowers:
    95                           	opt stack 0
    96  0000                     _SSPADD	set	4040
    97  0000                     _SSPCON1bits	set	4038
    98  0000                     _SSPSTATbits	set	4039
    99  0000                     _SSPBUF	set	4041
   100  0000                     _SSPCON2bits	set	4037
   101  0000                     _SSPSTAT	set	4039
   102  0000                     _SSPCON2	set	4037
   103  0000                     _PIR1bits	set	3998
   104  0000                     _INTCONbits	set	4082
   105  0000                     _RCONbits	set	4048
   106  0000                     _LATDbits	set	3980
   107  0000                     _LATB	set	3978
   108  0000                     _TRISDbits	set	3989
   109  0000                     _TRISB	set	3987
   110  0000                     _OSCCONbits	set	4051
   111  0000                     _RCREG	set	4014
   112  0000                     _TXREG	set	4013
   113  0000                     _PIE1bits	set	3997
   114  0000                     _IPR1bits	set	3999
   115  0000                     _TXSTAbits	set	4012
   116  0000                     _BAUDCONbits	set	4024
   117  0000                     _RCSTAbits	set	4011
   118  0000                     _SPBRG	set	4015
   119  0000                     _SPBRGH	set	4016
   120  0000                     _TRISCbits	set	3988
   121  00060B                     STR_2:
   122  00060B  6C                 	db	108	;'l'
   123  00060C  61                 	db	97	;'a'
   124  00060D  73                 	db	115	;'s'
   125  00060E  74                 	db	116	;'t'
   126  00060F  65                 	db	101	;'e'
   127  000610  64                 	db	100	;'d'
   128  000611  20                 	db	32
   129  000612  63                 	db	99	;'c'
   130  000613  79                 	db	121	;'y'
   131  000614  63                 	db	99	;'c'
   132  000615  6C                 	db	108	;'l'
   133  000616  65                 	db	101	;'e'
   134  000617  73                 	db	115	;'s'
   135  000618  20                 	db	32
   136  000619  25                 	db	37
   137  00061A  64                 	db	100	;'d'
   138  00061B  0A                 	db	10
   139  00061C  0D                 	db	13
   140  00061D  00                 	db	0
   141  00061E                     STR_1:
   142  00061E  50                 	db	80	;'P'
   143  00061F  72                 	db	114	;'r'
   144  000620  6F                 	db	111	;'o'
   145  000621  67                 	db	103	;'g'
   146  000622  72                 	db	114	;'r'
   147  000623  61                 	db	97	;'a'
   148  000624  6D                 	db	109	;'m'
   149  000625  20                 	db	32
   150  000626  53                 	db	83	;'S'
   151  000627  74                 	db	116	;'t'
   152  000628  61                 	db	97	;'a'
   153  000629  72                 	db	114	;'r'
   154  00062A  74                 	db	116	;'t'
   155  00062B  0A                 	db	10
   156  00062C  0D                 	db	13
   157  00062D  00                 	db	0
   158                           
   159                           ; #config settings
   160  00062E  00                 	db	0	; dummy byte at the end
   161  0000                     
   162                           	psect	cinit
   163  000BB8                     __pcinit:
   164                           	opt stack 0
   165  000BB8                     start_initialization:
   166                           	opt stack 0
   167  000BB8                     __initialization:
   168                           	opt stack 0
   169                           
   170                           ; Initialize objects allocated to COMRAM (4 bytes)
   171                           ; load TBLPTR registers with __pidataCOMRAM
   172  000BB8  0EBE               	movlw	low __pidataCOMRAM
   173  000BBA  6EF6               	movwf	tblptrl,c
   174  000BBC  0E0E               	movlw	high __pidataCOMRAM
   175  000BBE  6EF7               	movwf	tblptrh,c
   176  000BC0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   177  000BC2  6EF8               	movwf	tblptru,c
   178  000BC4  EE00  F056         	lfsr	0,__pdataCOMRAM
   179  000BC8  EE10 F004          	lfsr	1,4
   180  000BCC                     copy_data0:
   181  000BCC  0009               	tblrd		*+
   182  000BCE  CFF5 FFEE          	movff	tablat,postinc0
   183  000BD2  50E5               	movf	postdec1,w,c
   184  000BD4  50E1               	movf	fsr1l,w,c
   185  000BD6  E1FA               	bnz	copy_data0
   186                           
   187                           ; Clear objects allocated to BANK2 (256 bytes)
   188  000BD8  EE02  F000         	lfsr	0,__pbssBANK2
   189  000BDC  EE11 F000          	lfsr	1,256
   190  000BE0                     clear_0:
   191  000BE0  6AEE               	clrf	postinc0,c
   192  000BE2  50E5               	movf	postdec1,w,c
   193  000BE4  50E1               	movf	fsr1l,w,c
   194  000BE6  E1FC               	bnz	clear_0
   195  000BE8  50E2               	movf	fsr1h,w,c
   196  000BEA  E1FA               	bnz	clear_0
   197                           
   198                           ; Clear objects allocated to BANK1 (256 bytes)
   199  000BEC  EE01  F000         	lfsr	0,__pbssBANK1
   200  000BF0  EE11 F000          	lfsr	1,256
   201  000BF4                     clear_1:
   202  000BF4  6AEE               	clrf	postinc0,c
   203  000BF6  50E5               	movf	postdec1,w,c
   204  000BF8  50E1               	movf	fsr1l,w,c
   205  000BFA  E1FC               	bnz	clear_1
   206  000BFC  50E2               	movf	fsr1h,w,c
   207  000BFE  E1FA               	bnz	clear_1
   208                           
   209                           ; Clear objects allocated to COMRAM (19 bytes)
   210  000C00  EE00  F043         	lfsr	0,__pbssCOMRAM
   211  000C04  0E13               	movlw	19
   212  000C06                     clear_2:
   213  000C06  6AEE               	clrf	postinc0,c
   214  000C08  06E8               	decf	wreg,f,c
   215  000C0A  E1FD               	bnz	clear_2
   216  000C0C                     end_of_initialization:
   217                           	opt stack 0
   218  000C0C                     __end_of__initialization:
   219                           	opt stack 0
   220  000C0C  905A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   221  000C0E  925A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   222  000C10  0E00               	movlw	low (__Lmediumconst shr (0+16))
   223  000C12  6EF8               	movwf	tblptru,c
   224  000C14  0100               	movlb	0
   225  000C16  EF18  F003         	goto	_main	;jump to C main() function
   226                           tblptru	equ	0xFF8
   227                           tblptrh	equ	0xFF7
   228                           tblptrl	equ	0xFF6
   229                           tablat	equ	0xFF5
   230                           postinc0	equ	0xFEE
   231                           wreg	equ	0xFE8
   232                           postdec1	equ	0xFE5
   233                           fsr1h	equ	0xFE2
   234                           fsr1l	equ	0xFE1
   235                           
   236                           	psect	bssCOMRAM
   237  000043                     __pbssCOMRAM:
   238                           	opt stack 0
   239  000043                     _block_sample:
   240                           	opt stack 0
   241  000043                     	ds	8
   242  00004B                     _block_sample_pos:
   243                           	opt stack 0
   244  00004B                     	ds	8
   245  000053                     _ext_eeprom_acc:
   246                           	opt stack 0
   247  000053                     	ds	1
   248  000054                     _uart_got_data_bool:
   249                           	opt stack 0
   250  000054                     	ds	1
   251  000055                     _uart_data:
   252                           	opt stack 0
   253  000055                     	ds	1
   254                           tblptru	equ	0xFF8
   255                           tblptrh	equ	0xFF7
   256                           tblptrl	equ	0xFF6
   257                           tablat	equ	0xFF5
   258                           postinc0	equ	0xFEE
   259                           wreg	equ	0xFE8
   260                           postdec1	equ	0xFE5
   261                           fsr1h	equ	0xFE2
   262                           fsr1l	equ	0xFE1
   263                           
   264                           	psect	dataCOMRAM
   265  000056                     __pdataCOMRAM:
   266                           	opt stack 0
   267  000056                     _randx:
   268                           	opt stack 0
   269  000056                     	ds	4
   270                           tblptru	equ	0xFF8
   271                           tblptrh	equ	0xFF7
   272                           tblptrl	equ	0xFF6
   273                           tablat	equ	0xFF5
   274                           postinc0	equ	0xFEE
   275                           wreg	equ	0xFE8
   276                           postdec1	equ	0xFE5
   277                           fsr1h	equ	0xFE2
   278                           fsr1l	equ	0xFE1
   279                           
   280                           	psect	bssBANK1
   281  000100                     __pbssBANK1:
   282                           	opt stack 0
   283  000100                     _print_buffer:
   284                           	opt stack 0
   285  000100                     	ds	256
   286                           tblptru	equ	0xFF8
   287                           tblptrh	equ	0xFF7
   288                           tblptrl	equ	0xFF6
   289                           tablat	equ	0xFF5
   290                           postinc0	equ	0xFEE
   291                           wreg	equ	0xFE8
   292                           postdec1	equ	0xFE5
   293                           fsr1h	equ	0xFE2
   294                           fsr1l	equ	0xFE1
   295                           
   296                           	psect	bssBANK2
   297  000200                     __pbssBANK2:
   298                           	opt stack 0
   299  000200                     _block_buff:
   300                           	opt stack 0
   301  000200                     	ds	256
   302                           tblptru	equ	0xFF8
   303                           tblptrh	equ	0xFF7
   304                           tblptrl	equ	0xFF6
   305                           tablat	equ	0xFF5
   306                           postinc0	equ	0xFEE
   307                           wreg	equ	0xFE8
   308                           postdec1	equ	0xFE5
   309                           fsr1h	equ	0xFE2
   310                           fsr1l	equ	0xFE1
   311                           
   312                           	psect	cstackBANK0
   313  000080                     __pcstackBANK0:
   314                           	opt stack 0
   315  000080                     main@addr:
   316                           	opt stack 0
   317                           
   318                           ; 1 bytes @ 0x0
   319  000080                     	ds	1
   320  000081                     main@k:
   321                           	opt stack 0
   322                           
   323                           ; 1 bytes @ 0x1
   324  000081                     	ds	1
   325  000082                     main@last:
   326                           	opt stack 0
   327                           
   328                           ; 4 bytes @ 0x2
   329  000082                     	ds	4
   330  000086                     main@u:
   331                           	opt stack 0
   332                           
   333                           ; 2 bytes @ 0x6
   334  000086                     	ds	2
   335  000088                     main@ran:
   336                           	opt stack 0
   337                           
   338                           ; 1 bytes @ 0x8
   339  000088                     	ds	1
   340  000089                     main@j:
   341                           	opt stack 0
   342                           
   343                           ; 2 bytes @ 0x9
   344  000089                     	ds	2
   345  00008B                     main@acc:
   346                           	opt stack 0
   347                           
   348                           ; 1 bytes @ 0xB
   349  00008B                     	ds	1
   350  00008C                     main@i:
   351                           	opt stack 0
   352                           
   353                           ; 2 bytes @ 0xC
   354  00008C                     	ds	2
   355  00008E                     main@l:
   356                           	opt stack 0
   357                           
   358                           ; 2 bytes @ 0xE
   359  00008E                     	ds	2
   360                           tblptru	equ	0xFF8
   361                           tblptrh	equ	0xFF7
   362                           tblptrl	equ	0xFF6
   363                           tablat	equ	0xFF5
   364                           postinc0	equ	0xFEE
   365                           wreg	equ	0xFE8
   366                           postdec1	equ	0xFE5
   367                           fsr1h	equ	0xFE2
   368                           fsr1l	equ	0xFE1
   369                           
   370                           	psect	cstackCOMRAM
   371  000001                     __pcstackCOMRAM:
   372                           	opt stack 0
   373  000001                     uart_receiver@c:
   374                           	opt stack 0
   375                           
   376                           ; 2 bytes @ 0x0
   377  000001                     	ds	2
   378  000003                     uart_receiver@rx_flag:
   379                           	opt stack 0
   380                           
   381                           ; 2 bytes @ 0x2
   382  000003                     	ds	2
   383  000005                     uart_receiver@er:
   384                           	opt stack 0
   385                           
   386                           ; 1 bytes @ 0x4
   387  000005                     	ds	1
   388  000006                     ??_high_isr:
   389                           
   390                           ; 1 bytes @ 0x5
   391  000006                     	ds	14
   392  000014                     ??_low_isr:
   393                           
   394                           ; 1 bytes @ 0x13
   395  000014                     	ds	17
   396  000025                     ??_i2c_is_idle:
   397  000025                     ?___lwdiv:
   398                           	opt stack 0
   399  000025                     ?___lmul:
   400                           	opt stack 0
   401  000025                     uart_send@c:
   402                           	opt stack 0
   403  000025                     uart_init@gen_reg:
   404                           	opt stack 0
   405  000025                     ___lwdiv@dividend:
   406                           	opt stack 0
   407  000025                     memcpy@d1:
   408                           	opt stack 0
   409  000025                     srand@x:
   410                           	opt stack 0
   411  000025                     ___lmul@multiplier:
   412                           	opt stack 0
   413                           
   414                           ; 4 bytes @ 0x24
   415  000025                     	ds	1
   416  000026                     i2c_write@i2c_data:
   417                           	opt stack 0
   418  000026                     i2c_read@ack:
   419                           	opt stack 0
   420  000026                     uart_send_string@c:
   421                           	opt stack 0
   422                           
   423                           ; 2 bytes @ 0x25
   424  000026                     	ds	1
   425  000027                     uart_init@sync:
   426                           	opt stack 0
   427  000027                     ___lwdiv@divisor:
   428                           	opt stack 0
   429  000027                     memcpy@s1:
   430                           	opt stack 0
   431                           
   432                           ; 2 bytes @ 0x26
   433  000027                     	ds	1
   434  000028                     uart_send_string@z:
   435                           	opt stack 0
   436                           
   437                           ; 1 bytes @ 0x27
   438  000028                     	ds	1
   439  000029                     ___lwdiv@counter:
   440                           	opt stack 0
   441  000029                     uart_init@brgh:
   442                           	opt stack 0
   443  000029                     memcpy@n:
   444                           	opt stack 0
   445  000029                     ___lmul@multiplicand:
   446                           	opt stack 0
   447                           
   448                           ; 4 bytes @ 0x28
   449  000029                     	ds	1
   450  00002A                     ___lwdiv@quotient:
   451                           	opt stack 0
   452                           
   453                           ; 2 bytes @ 0x29
   454  00002A                     	ds	1
   455  00002B                     uart_init@brg16:
   456                           	opt stack 0
   457  00002B                     memcpy@d:
   458                           	opt stack 0
   459                           
   460                           ; 2 bytes @ 0x2A
   461  00002B                     	ds	1
   462  00002C                     ?___lwmod:
   463                           	opt stack 0
   464  00002C                     ___lwmod@dividend:
   465                           	opt stack 0
   466                           
   467                           ; 2 bytes @ 0x2B
   468  00002C                     	ds	1
   469  00002D                     memcpy@s:
   470                           	opt stack 0
   471  00002D                     ___lmul@product:
   472                           	opt stack 0
   473                           
   474                           ; 4 bytes @ 0x2C
   475  00002D                     	ds	1
   476  00002E                     ___lwmod@divisor:
   477                           	opt stack 0
   478                           
   479                           ; 2 bytes @ 0x2D
   480  00002E                     	ds	2
   481  000030                     ___lwmod@counter:
   482                           	opt stack 0
   483                           
   484                           ; 1 bytes @ 0x2F
   485  000030                     	ds	1
   486  000031                     ?_sprintf:
   487                           	opt stack 0
   488  000031                     ?_rand:
   489                           	opt stack 0
   490  000031                     sprintf@sp:
   491                           	opt stack 0
   492                           
   493                           ; 2 bytes @ 0x30
   494  000031                     	ds	2
   495  000033                     sprintf@f:
   496                           	opt stack 0
   497                           
   498                           ; 2 bytes @ 0x32
   499  000033                     	ds	6
   500  000039                     ??_sprintf:
   501                           
   502                           ; 1 bytes @ 0x38
   503  000039                     	ds	1
   504  00003A                     sprintf@ap:
   505                           	opt stack 0
   506                           
   507                           ; 2 bytes @ 0x39
   508  00003A                     	ds	2
   509  00003C                     sprintf@flag:
   510                           	opt stack 0
   511                           
   512                           ; 1 bytes @ 0x3B
   513  00003C                     	ds	1
   514  00003D                     sprintf@prec:
   515                           	opt stack 0
   516                           
   517                           ; 1 bytes @ 0x3C
   518  00003D                     	ds	1
   519  00003E                     sprintf@val:
   520                           	opt stack 0
   521                           
   522                           ; 2 bytes @ 0x3D
   523  00003E                     	ds	2
   524  000040                     sprintf@c:
   525                           	opt stack 0
   526                           
   527                           ; 1 bytes @ 0x3F
   528  000040                     	ds	1
   529  000041                     ??_main:
   530                           
   531                           ; 1 bytes @ 0x40
   532  000041                     	ds	2
   533                           tblptru	equ	0xFF8
   534                           tblptrh	equ	0xFF7
   535                           tblptrl	equ	0xFF6
   536                           tablat	equ	0xFF5
   537                           postinc0	equ	0xFEE
   538                           wreg	equ	0xFE8
   539                           postdec1	equ	0xFE5
   540                           fsr1h	equ	0xFE2
   541                           fsr1l	equ	0xFE1
   542                           
   543 ;;
   544 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   545 ;;
   546 ;; *************** function _main *****************
   547 ;; Defined at:
   548 ;;		line 33 in file "main.c"
   549 ;; Parameters:    Size  Location     Type
   550 ;;		None
   551 ;; Auto vars:     Size  Location     Type
   552 ;;  last            4    2[BANK0 ] unsigned long 
   553 ;;  l               2   14[BANK0 ] unsigned int 
   554 ;;  i               2   12[BANK0 ] unsigned int 
   555 ;;  j               2    9[BANK0 ] unsigned int 
   556 ;;  u               2    6[BANK0 ] unsigned int 
   557 ;;  acc             1   11[BANK0 ] unsigned char 
   558 ;;  ran             1    8[BANK0 ] unsigned char 
   559 ;;  k               1    1[BANK0 ] unsigned char 
   560 ;;  addr            1    0[BANK0 ] unsigned char 
   561 ;; Return value:  Size  Location     Type
   562 ;;                  1    wreg      void 
   563 ;; Registers used:
   564 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   565 ;; Tracked objects:
   566 ;;		On entry : 0/0
   567 ;;		On exit  : 0/0
   568 ;;		Unchanged: 0/0
   569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   570 ;;      Params:         0       0       0       0       0       0       0
   571 ;;      Locals:         0      16       0       0       0       0       0
   572 ;;      Temps:          2       0       0       0       0       0       0
   573 ;;      Totals:         2      16       0       0       0       0       0
   574 ;;Total ram usage:       18 bytes
   575 ;; Hardware stack levels required when called:    5
   576 ;; This function calls:
   577 ;;		_i2c_init
   578 ;;		_i2c_read
   579 ;;		_i2c_rep_start
   580 ;;		_i2c_start
   581 ;;		_i2c_stop
   582 ;;		_i2c_write
   583 ;;		_memcpy
   584 ;;		_rand
   585 ;;		_sprintf
   586 ;;		_srand
   587 ;;		_uart_init
   588 ;;		_uart_send_string
   589 ;; This function is called by:
   590 ;;		Startup code after reset
   591 ;; This function uses a non-reentrant model
   592 ;;
   593                           
   594                           	psect	text0
   595  000630                     __ptext0:
   596                           	opt stack 0
   597  000630                     _main:
   598                           	opt stack 26
   599                           
   600                           ;main.c: 34: uint16_t i = 0;
   601                           
   602                           ;incstack = 0
   603  000630  0E00               	movlw	0
   604  000632  0100               	movlb	0	; () banked
   605  000634  6F8D               	movwf	(main@i+1)& (0+255),b
   606  000636  0E00               	movlw	0
   607  000638  6F8C               	movwf	main@i& (0+255),b
   608                           
   609                           ;main.c: 35: uint16_t j = 0;
   610  00063A  0E00               	movlw	0
   611  00063C  0100               	movlb	0	; () banked
   612  00063E  6F8A               	movwf	(main@j+1)& (0+255),b
   613  000640  0E00               	movlw	0
   614  000642  6F89               	movwf	main@j& (0+255),b
   615                           
   616                           ;main.c: 36: uint16_t l = 0;
   617  000644  0E00               	movlw	0
   618  000646  0100               	movlb	0	; () banked
   619  000648  6F8F               	movwf	(main@l+1)& (0+255),b
   620  00064A  0E00               	movlw	0
   621  00064C  6F8E               	movwf	main@l& (0+255),b
   622                           
   623                           ;main.c: 37: uint16_t u = 0;
   624  00064E  0E00               	movlw	0
   625  000650  0100               	movlb	0	; () banked
   626  000652  6F87               	movwf	(main@u+1)& (0+255),b
   627  000654  0E00               	movlw	0
   628  000656  6F86               	movwf	main@u& (0+255),b
   629                           
   630                           ;main.c: 38: uint8_t acc = 0;
   631  000658  0E00               	movlw	0
   632  00065A  0100               	movlb	0	; () banked
   633  00065C  6F8B               	movwf	main@acc& (0+255),b
   634                           
   635                           ;main.c: 39: uint8_t addr = 0;
   636  00065E  0E00               	movlw	0
   637  000660  0100               	movlb	0	; () banked
   638  000662  6F80               	movwf	main@addr& (0+255),b
   639                           
   640                           ;main.c: 40: uint8_t ran = 0;
   641  000664  0E00               	movlw	0
   642  000666  0100               	movlb	0	; () banked
   643  000668  6F88               	movwf	main@ran& (0+255),b
   644                           
   645                           ; BSR set to: 0
   646                           ;main.c: 41: OSCCONbits.IRCF = 0x07;
   647  00066A  88D3               	bsf	4051,4,c	;volatile
   648  00066C  8AD3               	bsf	4051,5,c	;volatile
   649  00066E  8CD3               	bsf	4051,6,c	;volatile
   650                           
   651                           ;main.c: 42: OSCCONbits.SCS = 0x03;
   652  000670  0E03               	movlw	3
   653  000672  12D3               	iorwf	4051,f,c	;volatile
   654  000674                     l111:
   655  000674  A4D3               	btfss	4051,2,c	;volatile
   656  000676  D7FE               	goto	l111
   657                           
   658                           ;main.c: 45: ext_eeprom_acc.addr = 0x0A;
   659  000678  5053               	movf	_ext_eeprom_acc,w,c
   660  00067A  0B0F               	andlw	-241
   661  00067C  09A0               	iorlw	160
   662  00067E  6E53               	movwf	_ext_eeprom_acc,c
   663                           
   664                           ;main.c: 46: srand(46538);
   665  000680  0EB5               	movlw	181
   666  000682  6E26               	movwf	srand@x+1,c
   667  000684  0ECA               	movlw	202
   668  000686  6E25               	movwf	srand@x,c
   669  000688  EC4C  F007         	call	_srand	;wreg free
   670                           
   671                           ;main.c: 48: TRISB=0;
   672  00068C  0E00               	movlw	0
   673  00068E  6E93               	movwf	3987,c	;volatile
   674                           
   675                           ;main.c: 49: TRISDbits.RD2=0;
   676  000690  9495               	bcf	3989,2,c	;volatile
   677                           
   678                           ;main.c: 50: LATB=0x00;
   679  000692  0E00               	movlw	0
   680  000694  6E8A               	movwf	3978,c	;volatile
   681                           
   682                           ;main.c: 51: LATDbits.LD2=0;
   683  000696  948C               	bcf	3980,2,c	;volatile
   684                           
   685                           ;main.c: 53: uart_init(51,0,1,0);
   686  000698  0E00               	movlw	0
   687  00069A  6E26               	movwf	uart_init@gen_reg+1,c
   688  00069C  0E33               	movlw	51
   689  00069E  6E25               	movwf	uart_init@gen_reg,c
   690  0006A0  0E00               	movlw	0
   691  0006A2  6E28               	movwf	uart_init@sync+1,c
   692  0006A4  0E00               	movlw	0
   693  0006A6  6E27               	movwf	uart_init@sync,c
   694  0006A8  0E00               	movlw	0
   695  0006AA  6E2A               	movwf	uart_init@brgh+1,c
   696  0006AC  0E01               	movlw	1
   697  0006AE  6E29               	movwf	uart_init@brgh,c
   698  0006B0  0E00               	movlw	0
   699  0006B2  6E2C               	movwf	uart_init@brg16+1,c
   700  0006B4  0E00               	movlw	0
   701  0006B6  6E2B               	movwf	uart_init@brg16,c
   702  0006B8  ECE6  F006         	call	_uart_init	;wreg free
   703                           
   704                           ;main.c: 54: i2c_init();
   705  0006BC  EC25  F007         	call	_i2c_init	;wreg free
   706                           
   707                           ;main.c: 56: RCONbits.IPEN = 1;
   708  0006C0  8ED0               	bsf	4048,7,c	;volatile
   709                           
   710                           ;main.c: 57: INTCONbits.GIEH = 1;
   711  0006C2  8EF2               	bsf	intcon,7,c	;volatile
   712                           
   713                           ;main.c: 58: INTCONbits.GIEL = 1;
   714  0006C4  8CF2               	bsf	intcon,6,c	;volatile
   715                           
   716                           ;main.c: 60: _delay((unsigned long)((2000)*(8000000/4000.0)));
   717  0006C6  0E15               	movlw	21
   718  0006C8  6E42               	movwf	(??_main+1)& (0+255),c
   719  0006CA  0E4B               	movlw	75
   720  0006CC  6E41               	movwf	??_main& (0+255),c
   721  0006CE  0EBE               	movlw	190
   722  0006D0                     u1427:
   723  0006D0  2EE8               	decfsz	wreg,f,c
   724  0006D2  D7FE               	bra	u1427
   725  0006D4  2E41               	decfsz	??_main& (0+255),f,c
   726  0006D6  D7FC               	bra	u1427
   727  0006D8  2E42               	decfsz	(??_main+1)& (0+255),f,c
   728  0006DA  D7FA               	bra	u1427
   729  0006DC  D000               	nop2	
   730                           
   731                           ;main.c: 61: sprintf(print_buffer,"Program Start\n\r");
   732  0006DE  0E00               	movlw	low _print_buffer
   733  0006E0  6E31               	movwf	sprintf@sp,c
   734  0006E2  0E01               	movlw	high _print_buffer
   735  0006E4  6E32               	movwf	sprintf@sp+1,c
   736  0006E6  0E1E               	movlw	low STR_1
   737  0006E8  6E33               	movwf	sprintf@f,c
   738  0006EA  0E06               	movlw	high STR_1
   739  0006EC  6E34               	movwf	sprintf@f+1,c
   740  0006EE  ECEE  F004         	call	_sprintf	;wreg free
   741                           
   742                           ;main.c: 62: uart_send_string(print_buffer);
   743  0006F2  0E00               	movlw	low _print_buffer
   744  0006F4  6E26               	movwf	uart_send_string@c,c
   745  0006F6  0E01               	movlw	high _print_buffer
   746  0006F8  6E27               	movwf	uart_send_string@c+1,c
   747  0006FA  ECCB  F006         	call	_uart_send_string	;wreg free
   748                           
   749                           ;main.c: 63: uint8_t k = 0;
   750  0006FE  0E00               	movlw	0
   751  000700  0100               	movlb	0	; () banked
   752  000702  6F81               	movwf	main@k& (0+255),b
   753                           
   754                           ; BSR set to: 0
   755                           ;main.c: 67: uint32_t last = 0;
   756  000704  0E00               	movlw	0
   757  000706  0100               	movlb	0	; () banked
   758  000708  6F82               	movwf	main@last& (0+255),b
   759  00070A  0E00               	movlw	0
   760  00070C  6F83               	movwf	(main@last+1)& (0+255),b
   761  00070E  0E00               	movlw	0
   762  000710  6F84               	movwf	(main@last+2)& (0+255),b
   763  000712  0E00               	movlw	0
   764  000714  6F85               	movwf	(main@last+3)& (0+255),b
   765  000716                     l1845:
   766                           
   767                           ; BSR set to: 0
   768                           ;main.c: 71: ext_eeprom_acc.rw = 0;
   769  000716  9053               	bcf	_ext_eeprom_acc,0,c
   770                           
   771                           ; BSR set to: 0
   772                           ;main.c: 73: for(l = 0 ; l < 8 ; l++){
   773  000718  0E00               	movlw	0
   774  00071A  0100               	movlb	0	; () banked
   775  00071C  6F8F               	movwf	(main@l+1)& (0+255),b
   776  00071E  0E00               	movlw	0
   777  000720  6F8E               	movwf	main@l& (0+255),b
   778                           
   779                           ; BSR set to: 0
   780  000722  0100               	movlb	0	; () banked
   781  000724  518F               	movf	(main@l+1)& (0+255),w,b
   782  000726  E106               	bnz	u1270
   783  000728  0E08               	movlw	8
   784  00072A  0100               	movlb	0	; () banked
   785  00072C  5D8E               	subwf	main@l& (0+255),w,b
   786  00072E  B0D8               	btfsc	status,0,c
   787  000730  D090               	goto	l1899
   788  000732  D001               	goto	l1853
   789  000734                     u1270:
   790                           
   791                           ; BSR set to: 0
   792  000734  D08E               	goto	l1899
   793  000736                     l1853:
   794                           
   795                           ; BSR set to: 0
   796                           ;main.c: 74: block_sample_pos[l]=rand() % 256;
   797  000736  0E4B               	movlw	low _block_sample_pos
   798  000738  0100               	movlb	0	; () banked
   799  00073A  258E               	addwf	main@l& (0+255),w,b
   800  00073C  6ED9               	movwf	fsr2l,c
   801  00073E  0E00               	movlw	high _block_sample_pos
   802  000740  0100               	movlb	0	; () banked
   803  000742  218F               	addwfc	(main@l+1)& (0+255),w,b
   804  000744  6EDA               	movwf	fsr2h,c
   805  000746  EC61  F006         	call	_rand	;wreg free
   806  00074A  5031               	movf	?_rand,w,c
   807  00074C  6EDF               	movwf	indf2,c
   808                           
   809                           ;main.c: 75: ext_eeprom_acc.block = l;
   810  00074E  C08E  F041         	movff	main@l,??_main
   811  000752  4641               	rlncf	??_main,f,c
   812  000754  5053               	movf	_ext_eeprom_acc,w,c
   813  000756  1841               	xorwf	??_main,w,c
   814  000758  0BF1               	andlw	-15
   815  00075A  1841               	xorwf	??_main,w,c
   816  00075C  6E53               	movwf	_ext_eeprom_acc,c
   817                           
   818                           ;main.c: 76: memcpy(&acc,&ext_eeprom_acc,sizeof(uint8_t));
   819  00075E  0E8B               	movlw	low main@acc
   820  000760  6E25               	movwf	memcpy@d1,c
   821  000762  0E00               	movlw	high main@acc
   822  000764  6E26               	movwf	memcpy@d1+1,c
   823  000766  0E53               	movlw	low _ext_eeprom_acc
   824  000768  6E27               	movwf	memcpy@s1,c
   825  00076A  0E00               	movlw	high _ext_eeprom_acc
   826  00076C  6E28               	movwf	memcpy@s1+1,c
   827  00076E  0E00               	movlw	0
   828  000770  6E2A               	movwf	memcpy@n+1,c
   829  000772  0E01               	movlw	1
   830  000774  6E29               	movwf	memcpy@n,c
   831  000776  ECAB  F006         	call	_memcpy	;wreg free
   832                           
   833                           ;main.c: 78: for(i = 0 ; i < 16 ; i++){
   834  00077A  0E00               	movlw	0
   835  00077C  0100               	movlb	0	; () banked
   836  00077E  6F8D               	movwf	(main@i+1)& (0+255),b
   837  000780  0E00               	movlw	0
   838  000782  6F8C               	movwf	main@i& (0+255),b
   839  000784                     l1861:
   840                           
   841                           ; BSR set to: 0
   842  000784  0100               	movlb	0	; () banked
   843  000786  518D               	movf	(main@i+1)& (0+255),w,b
   844  000788  E158               	bnz	l1893
   845  00078A  0E10               	movlw	16
   846  00078C  0100               	movlb	0	; () banked
   847  00078E  5D8C               	subwf	main@i& (0+255),w,b
   848  000790  B0D8               	btfsc	status,0,c
   849  000792  D053               	goto	l1893
   850                           
   851                           ; BSR set to: 0
   852                           ;main.c: 79: i2c_start();
   853                           
   854                           ; BSR set to: 0
   855                           
   856                           ; BSR set to: 0
   857  000794  EC57  F007         	call	_i2c_start	;wreg free
   858                           
   859                           ;main.c: 80: i2c_write(acc);
   860  000798  0100               	movlb	0	; () banked
   861  00079A  518B               	movf	main@acc& (0+255),w,b
   862  00079C  EC31  F007         	call	_i2c_write
   863                           
   864                           ;main.c: 81: i2c_write(i*16);
   865  0007A0  0100               	movlb	0	; () banked
   866  0007A2  398C               	swapf	main@i& (0+255),w,b
   867  0007A4  0BF0               	andlw	240
   868  0007A6  EC31  F007         	call	_i2c_write
   869                           
   870                           ;main.c: 82: for(j = 0 ; j < 16 ; j++){
   871  0007AA  0E00               	movlw	0
   872  0007AC  0100               	movlb	0	; () banked
   873  0007AE  6F8A               	movwf	(main@j+1)& (0+255),b
   874  0007B0  0E00               	movlw	0
   875  0007B2  6F89               	movwf	main@j& (0+255),b
   876  0007B4                     l1869:
   877                           
   878                           ; BSR set to: 0
   879  0007B4  0100               	movlb	0	; () banked
   880  0007B6  518A               	movf	(main@j+1)& (0+255),w,b
   881  0007B8  E133               	bnz	l1885
   882  0007BA  0E10               	movlw	16
   883  0007BC  0100               	movlb	0	; () banked
   884  0007BE  5D89               	subwf	main@j& (0+255),w,b
   885  0007C0  B0D8               	btfsc	status,0,c
   886  0007C2  D02E               	goto	l1885
   887                           
   888                           ; BSR set to: 0
   889                           ;main.c: 83: ran=rand() % 256;
   890                           
   891                           ; BSR set to: 0
   892                           
   893                           ; BSR set to: 0
   894  0007C4  EC61  F006         	call	_rand	;wreg free
   895  0007C8  5031               	movf	?_rand,w,c
   896  0007CA  0100               	movlb	0	; () banked
   897  0007CC  6F88               	movwf	main@ran& (0+255),b
   898                           
   899                           ;main.c: 84: i2c_write(ran);
   900  0007CE  0100               	movlb	0	; () banked
   901  0007D0  5188               	movf	main@ran& (0+255),w,b
   902  0007D2  EC31  F007         	call	_i2c_write
   903                           
   904                           ;main.c: 85: if(u == block_sample_pos[l]){
   905  0007D6  0E4B               	movlw	low _block_sample_pos
   906  0007D8  0100               	movlb	0	; () banked
   907  0007DA  258E               	addwf	main@l& (0+255),w,b
   908  0007DC  6ED9               	movwf	fsr2l,c
   909  0007DE  0E00               	movlw	high _block_sample_pos
   910  0007E0  0100               	movlb	0	; () banked
   911  0007E2  218F               	addwfc	(main@l+1)& (0+255),w,b
   912  0007E4  6EDA               	movwf	fsr2h,c
   913  0007E6  50DF               	movf	indf2,w,c
   914  0007E8  6E41               	movwf	??_main& (0+255),c
   915  0007EA  6A42               	clrf	(??_main+1)& (0+255),c
   916  0007EC  0100               	movlb	0	; () banked
   917  0007EE  5186               	movf	main@u& (0+255),w,b
   918  0007F0  1841               	xorwf	??_main,w,c
   919  0007F2  E10F               	bnz	l1879
   920  0007F4  0100               	movlb	0	; () banked
   921  0007F6  5187               	movf	(main@u+1)& (0+255),w,b
   922  0007F8  1842               	xorwf	??_main+1,w,c
   923  0007FA  A4D8               	btfss	status,2,c
   924  0007FC  D00A               	goto	l1879
   925                           
   926                           ; BSR set to: 0
   927                           ;main.c: 86: block_sample[l] = ran;
   928  0007FE  0E43               	movlw	low _block_sample
   929  000800  0100               	movlb	0	; () banked
   930  000802  258E               	addwf	main@l& (0+255),w,b
   931  000804  6ED9               	movwf	fsr2l,c
   932  000806  0E00               	movlw	high _block_sample
   933  000808  0100               	movlb	0	; () banked
   934  00080A  218F               	addwfc	(main@l+1)& (0+255),w,b
   935  00080C  6EDA               	movwf	fsr2h,c
   936  00080E  C088  FFDF         	movff	main@ran,indf2
   937  000812                     l1879:
   938                           
   939                           ; BSR set to: 0
   940                           ;main.c: 87: }
   941                           ;main.c: 88: u++;
   942  000812  0100               	movlb	0	; () banked
   943  000814  4B86               	infsnz	main@u& (0+255),f,b
   944  000816  2B87               	incf	(main@u+1)& (0+255),f,b
   945                           
   946                           ; BSR set to: 0
   947  000818  0100               	movlb	0	; () banked
   948  00081A  4B89               	infsnz	main@j& (0+255),f,b
   949  00081C  2B8A               	incf	(main@j+1)& (0+255),f,b
   950  00081E  D7CA               	goto	l1869
   951  000820                     l1885:
   952                           
   953                           ; BSR set to: 0
   954                           ;main.c: 89: }
   955                           ;main.c: 90: i2c_stop();
   956  000820  EC53  F007         	call	_i2c_stop	;wreg free
   957                           
   958                           ;main.c: 91: _delay((unsigned long)((5)*(8000000/4000.0)));
   959  000824  0E0D               	movlw	13
   960  000826  6E41               	movwf	??_main& (0+255),c
   961  000828  0EFC               	movlw	252
   962  00082A                     u1437:
   963  00082A  2EE8               	decfsz	wreg,f,c
   964  00082C  D7FE               	bra	u1437
   965  00082E  2E41               	decfsz	??_main& (0+255),f,c
   966  000830  D7FC               	bra	u1437
   967  000832  0100               	movlb	0	; () banked
   968  000834  4B8C               	infsnz	main@i& (0+255),f,b
   969  000836  2B8D               	incf	(main@i+1)& (0+255),f,b
   970  000838  D7A5               	goto	l1861
   971  00083A                     l1893:
   972                           
   973                           ; BSR set to: 0
   974                           ;main.c: 92: }
   975                           ;main.c: 93: u=0;
   976  00083A  0E00               	movlw	0
   977  00083C  0100               	movlb	0	; () banked
   978  00083E  6F87               	movwf	(main@u+1)& (0+255),b
   979  000840  0E00               	movlw	0
   980  000842  6F86               	movwf	main@u& (0+255),b
   981                           
   982                           ; BSR set to: 0
   983  000844  0100               	movlb	0	; () banked
   984  000846  4B8E               	infsnz	main@l& (0+255),f,b
   985  000848  2B8F               	incf	(main@l+1)& (0+255),f,b
   986                           
   987                           ; BSR set to: 0
   988  00084A  0100               	movlb	0	; () banked
   989  00084C  518F               	movf	(main@l+1)& (0+255),w,b
   990  00084E  E101               	bnz	l1899
   991  000850  D76B               	goto	L1
   992  000852                     l1899:
   993                           
   994                           ; BSR set to: 0
   995                           ;main.c: 94: }
   996                           ;main.c: 99: for(l = 0 ; l < 8 ; l++){
   997  000852  0E00               	movlw	0
   998  000854  0100               	movlb	0	; () banked
   999  000856  6F8F               	movwf	(main@l+1)& (0+255),b
  1000  000858  0E00               	movlw	0
  1001  00085A  6F8E               	movwf	main@l& (0+255),b
  1002                           
  1003                           ; BSR set to: 0
  1004  00085C  0100               	movlb	0	; () banked
  1005  00085E  518F               	movf	(main@l+1)& (0+255),w,b
  1006  000860  E106               	bnz	u1340
  1007  000862  0E08               	movlw	8
  1008  000864  0100               	movlb	0	; () banked
  1009  000866  5D8E               	subwf	main@l& (0+255),w,b
  1010  000868  B0D8               	btfsc	status,0,c
  1011  00086A  D0B0               	goto	l1963
  1012  00086C  D001               	goto	l1905
  1013  00086E                     u1340:
  1014                           
  1015                           ; BSR set to: 0
  1016  00086E  D0AE               	goto	l1963
  1017  000870                     l1905:
  1018                           
  1019                           ; BSR set to: 0
  1020                           ;main.c: 102: ext_eeprom_acc.block = l;
  1021  000870  C08E  F041         	movff	main@l,??_main
  1022  000874  4641               	rlncf	??_main,f,c
  1023  000876  5053               	movf	_ext_eeprom_acc,w,c
  1024  000878  1841               	xorwf	??_main,w,c
  1025  00087A  0BF1               	andlw	-15
  1026  00087C  1841               	xorwf	??_main,w,c
  1027  00087E  6E53               	movwf	_ext_eeprom_acc,c
  1028                           
  1029                           ; BSR set to: 0
  1030                           ;main.c: 103: ext_eeprom_acc.rw = 0;
  1031  000880  9053               	bcf	_ext_eeprom_acc,0,c
  1032                           
  1033                           ; BSR set to: 0
  1034                           ;main.c: 104: memcpy(&acc,&ext_eeprom_acc,sizeof(uint8_t));
  1035  000882  0E8B               	movlw	low main@acc
  1036  000884  6E25               	movwf	memcpy@d1,c
  1037  000886  0E00               	movlw	high main@acc
  1038  000888  6E26               	movwf	memcpy@d1+1,c
  1039  00088A  0E53               	movlw	low _ext_eeprom_acc
  1040  00088C  6E27               	movwf	memcpy@s1,c
  1041  00088E  0E00               	movlw	high _ext_eeprom_acc
  1042  000890  6E28               	movwf	memcpy@s1+1,c
  1043  000892  0E00               	movlw	0
  1044  000894  6E2A               	movwf	memcpy@n+1,c
  1045  000896  0E01               	movlw	1
  1046  000898  6E29               	movwf	memcpy@n,c
  1047  00089A  ECAB  F006         	call	_memcpy	;wreg free
  1048                           
  1049                           ;main.c: 105: i2c_start();
  1050  00089E  EC57  F007         	call	_i2c_start	;wreg free
  1051                           
  1052                           ;main.c: 106: i2c_write(acc);
  1053  0008A2  0100               	movlb	0	; () banked
  1054  0008A4  518B               	movf	main@acc& (0+255),w,b
  1055  0008A6  EC31  F007         	call	_i2c_write
  1056                           
  1057                           ;main.c: 107: i2c_write(0x00);
  1058  0008AA  0E00               	movlw	0
  1059  0008AC  EC31  F007         	call	_i2c_write
  1060                           
  1061                           ;main.c: 108: ext_eeprom_acc.rw = 1;
  1062  0008B0  8053               	bsf	_ext_eeprom_acc,0,c
  1063                           
  1064                           ;main.c: 109: memcpy(&acc,&ext_eeprom_acc,sizeof(uint8_t));
  1065  0008B2  0E8B               	movlw	low main@acc
  1066  0008B4  6E25               	movwf	memcpy@d1,c
  1067  0008B6  0E00               	movlw	high main@acc
  1068  0008B8  6E26               	movwf	memcpy@d1+1,c
  1069  0008BA  0E53               	movlw	low _ext_eeprom_acc
  1070  0008BC  6E27               	movwf	memcpy@s1,c
  1071  0008BE  0E00               	movlw	high _ext_eeprom_acc
  1072  0008C0  6E28               	movwf	memcpy@s1+1,c
  1073  0008C2  0E00               	movlw	0
  1074  0008C4  6E2A               	movwf	memcpy@n+1,c
  1075  0008C6  0E01               	movlw	1
  1076  0008C8  6E29               	movwf	memcpy@n,c
  1077  0008CA  ECAB  F006         	call	_memcpy	;wreg free
  1078                           
  1079                           ;main.c: 110: i2c_rep_start();
  1080  0008CE  EC5B  F007         	call	_i2c_rep_start	;wreg free
  1081                           
  1082                           ;main.c: 111: i2c_write(acc);
  1083  0008D2  0100               	movlb	0	; () banked
  1084  0008D4  518B               	movf	main@acc& (0+255),w,b
  1085  0008D6  EC31  F007         	call	_i2c_write
  1086                           
  1087                           ;main.c: 112: for(i = 0; i < 255 ; i++){
  1088  0008DA  0E00               	movlw	0
  1089  0008DC  0100               	movlb	0	; () banked
  1090  0008DE  6F8D               	movwf	(main@i+1)& (0+255),b
  1091  0008E0  0E00               	movlw	0
  1092  0008E2  6F8C               	movwf	main@i& (0+255),b
  1093  0008E4                     l1927:
  1094                           
  1095                           ; BSR set to: 0
  1096  0008E4  0100               	movlb	0	; () banked
  1097  0008E6  518D               	movf	(main@i+1)& (0+255),w,b
  1098  0008E8  E114               	bnz	l1937
  1099  0008EA  0100               	movlb	0	; () banked
  1100  0008EC  298C               	incf	main@i& (0+255),w,b
  1101  0008EE  B0D8               	btfsc	status,0,c
  1102  0008F0  D010               	goto	l1937
  1103                           
  1104                           ; BSR set to: 0
  1105                           ;main.c: 113: block_buff[i] = i2c_read(1);
  1106                           
  1107                           ; BSR set to: 0
  1108                           
  1109                           ; BSR set to: 0
  1110  0008F2  0E00               	movlw	low _block_buff
  1111  0008F4  0100               	movlb	0	; () banked
  1112  0008F6  258C               	addwf	main@i& (0+255),w,b
  1113  0008F8  6ED9               	movwf	fsr2l,c
  1114  0008FA  0E02               	movlw	high _block_buff
  1115  0008FC  0100               	movlb	0	; () banked
  1116  0008FE  218D               	addwfc	(main@i+1)& (0+255),w,b
  1117  000900  6EDA               	movwf	fsr2h,c
  1118  000902  0E01               	movlw	1
  1119  000904  EC18  F007         	call	_i2c_read
  1120  000908  6EDF               	movwf	indf2,c
  1121  00090A  0100               	movlb	0	; () banked
  1122  00090C  4B8C               	infsnz	main@i& (0+255),f,b
  1123  00090E  2B8D               	incf	(main@i+1)& (0+255),f,b
  1124  000910  D7E9               	goto	l1927
  1125  000912                     l1937:
  1126                           
  1127                           ; BSR set to: 0
  1128                           ;main.c: 114: }
  1129                           ;main.c: 115: block_buff[255] = i2c_read(0);
  1130  000912  0E00               	movlw	0
  1131  000914  EC18  F007         	call	_i2c_read
  1132  000918  0102               	movlb	2	; () banked
  1133  00091A  6FFF               	movwf	(_block_buff+255)& (0+255),b
  1134                           
  1135                           ;main.c: 116: i2c_stop();
  1136  00091C  EC53  F007         	call	_i2c_stop	;wreg free
  1137                           
  1138                           ;main.c: 118: for(i = 0; i < 256 ; i++){
  1139  000920  0E00               	movlw	0
  1140  000922  0100               	movlb	0	; () banked
  1141  000924  6F8D               	movwf	(main@i+1)& (0+255),b
  1142  000926  0E00               	movlw	0
  1143  000928  6F8C               	movwf	main@i& (0+255),b
  1144  00092A                     l1941:
  1145                           
  1146                           ; BSR set to: 0
  1147  00092A  0100               	movlb	0	; () banked
  1148  00092C  058D               	decf	(main@i+1)& (0+255),w,b
  1149  00092E  B0D8               	btfsc	status,0,c
  1150  000930  D046               	goto	l1959
  1151                           
  1152                           ; BSR set to: 0
  1153                           ;main.c: 119: if(i == block_sample_pos[l]){
  1154                           
  1155                           ; BSR set to: 0
  1156                           
  1157                           ; BSR set to: 0
  1158  000932  0E4B               	movlw	low _block_sample_pos
  1159  000934  0100               	movlb	0	; () banked
  1160  000936  258E               	addwf	main@l& (0+255),w,b
  1161  000938  6ED9               	movwf	fsr2l,c
  1162  00093A  0E00               	movlw	high _block_sample_pos
  1163  00093C  0100               	movlb	0	; () banked
  1164  00093E  218F               	addwfc	(main@l+1)& (0+255),w,b
  1165  000940  6EDA               	movwf	fsr2h,c
  1166  000942  50DF               	movf	indf2,w,c
  1167  000944  6E41               	movwf	??_main& (0+255),c
  1168  000946  6A42               	clrf	(??_main+1)& (0+255),c
  1169  000948  0100               	movlb	0	; () banked
  1170  00094A  518C               	movf	main@i& (0+255),w,b
  1171  00094C  1841               	xorwf	??_main,w,c
  1172  00094E  E133               	bnz	l1955
  1173  000950  0100               	movlb	0	; () banked
  1174  000952  518D               	movf	(main@i+1)& (0+255),w,b
  1175  000954  1842               	xorwf	??_main+1,w,c
  1176  000956  A4D8               	btfss	status,2,c
  1177  000958  D02E               	goto	l1955
  1178                           
  1179                           ; BSR set to: 0
  1180                           ;main.c: 122: if(block_sample[l] != block_buff[i]){
  1181  00095A  0E00               	movlw	low _block_buff
  1182  00095C  0100               	movlb	0	; () banked
  1183  00095E  258C               	addwf	main@i& (0+255),w,b
  1184  000960  6ED9               	movwf	fsr2l,c
  1185  000962  0E02               	movlw	high _block_buff
  1186  000964  0100               	movlb	0	; () banked
  1187  000966  218D               	addwfc	(main@i+1)& (0+255),w,b
  1188  000968  6EDA               	movwf	fsr2h,c
  1189  00096A  0E43               	movlw	low _block_sample
  1190  00096C  0100               	movlb	0	; () banked
  1191  00096E  258E               	addwf	main@l& (0+255),w,b
  1192  000970  6EE1               	movwf	fsr1l,c
  1193  000972  0E00               	movlw	high _block_sample
  1194  000974  0100               	movlb	0	; () banked
  1195  000976  218F               	addwfc	(main@l+1)& (0+255),w,b
  1196  000978  6EE2               	movwf	fsr1h,c
  1197  00097A  50DE               	movf	postinc2,w,c
  1198  00097C  18E6               	xorwf	postinc1,w,c
  1199  00097E  B4D8               	btfsc	status,2,c
  1200  000980  D01A               	goto	l1955
  1201                           
  1202                           ; BSR set to: 0
  1203                           ;main.c: 123: LATB = 0xFF;
  1204  000982  688A               	setf	3978,c	;volatile
  1205                           
  1206                           ; BSR set to: 0
  1207                           ;main.c: 124: sprintf(print_buffer,"lasted cycles %d\n\r",last);
  1208  000984  0E00               	movlw	low _print_buffer
  1209  000986  6E31               	movwf	sprintf@sp,c
  1210  000988  0E01               	movlw	high _print_buffer
  1211  00098A  6E32               	movwf	sprintf@sp+1,c
  1212  00098C  0E0B               	movlw	low STR_2
  1213  00098E  6E33               	movwf	sprintf@f,c
  1214  000990  0E06               	movlw	high STR_2
  1215  000992  6E34               	movwf	sprintf@f+1,c
  1216  000994  C082  F035         	movff	main@last,?_sprintf+4
  1217  000998  C083  F036         	movff	main@last+1,?_sprintf+5
  1218  00099C  C084  F037         	movff	main@last+2,?_sprintf+6
  1219  0009A0  C085  F038         	movff	main@last+3,?_sprintf+7
  1220  0009A4  ECEE  F004         	call	_sprintf	;wreg free
  1221                           
  1222                           ;main.c: 125: uart_send_string(print_buffer);
  1223  0009A8  0E00               	movlw	low _print_buffer
  1224  0009AA  6E26               	movwf	uart_send_string@c,c
  1225  0009AC  0E01               	movlw	high _print_buffer
  1226  0009AE  6E27               	movwf	uart_send_string@c+1,c
  1227  0009B0  ECCB  F006         	call	_uart_send_string	;wreg free
  1228  0009B4                     l130:
  1229  0009B4  D7FF               	goto	l130
  1230  0009B6                     l1955:
  1231  0009B6  0100               	movlb	0	; () banked
  1232  0009B8  4B8C               	infsnz	main@i& (0+255),f,b
  1233  0009BA  2B8D               	incf	(main@i+1)& (0+255),f,b
  1234  0009BC  D7B6               	goto	l1941
  1235  0009BE                     l1959:
  1236                           
  1237                           ; BSR set to: 0
  1238  0009BE  0100               	movlb	0	; () banked
  1239  0009C0  4B8E               	infsnz	main@l& (0+255),f,b
  1240  0009C2  2B8F               	incf	(main@l+1)& (0+255),f,b
  1241                           
  1242                           ; BSR set to: 0
  1243  0009C4  0100               	movlb	0	; () banked
  1244  0009C6  518F               	movf	(main@l+1)& (0+255),w,b
  1245  0009C8  E101               	bnz	l1963
  1246  0009CA  D74B               	goto	L2
  1247  0009CC                     l1963:
  1248                           
  1249                           ; BSR set to: 0
  1250                           ;main.c: 127: }
  1251                           ;main.c: 128: }
  1252                           ;main.c: 129: }
  1253                           ;main.c: 132: }
  1254                           ;main.c: 133: last++;
  1255  0009CC  0E01               	movlw	1
  1256  0009CE  0100               	movlb	0	; () banked
  1257  0009D0  2782               	addwf	main@last& (0+255),f,b
  1258  0009D2  0E00               	movlw	0
  1259  0009D4  2383               	addwfc	(main@last+1)& (0+255),f,b
  1260  0009D6  2384               	addwfc	(main@last+2)& (0+255),f,b
  1261  0009D8  2385               	addwfc	(main@last+3)& (0+255),f,b
  1262                           
  1263                           ; BSR set to: 0
  1264  0009DA  D69D               	goto	l1845
  1265  0009DC                     __end_of_main:
  1266                           	opt stack 0
  1267                           tblptru	equ	0xFF8
  1268                           tblptrh	equ	0xFF7
  1269                           tblptrl	equ	0xFF6
  1270                           tablat	equ	0xFF5
  1271                           intcon	equ	0xFF2
  1272                           postinc0	equ	0xFEE
  1273                           wreg	equ	0xFE8
  1274                           postinc1	equ	0xFE6
  1275                           postdec1	equ	0xFE5
  1276                           fsr1h	equ	0xFE2
  1277                           fsr1l	equ	0xFE1
  1278                           indf2	equ	0xFDF
  1279                           postinc2	equ	0xFDE
  1280                           fsr2h	equ	0xFDA
  1281                           fsr2l	equ	0xFD9
  1282                           status	equ	0xFD8
  1283                           
  1284 ;; *************** function _uart_send_string *****************
  1285 ;; Defined at:
  1286 ;;		line 50 in file "uart_layer.c"
  1287 ;; Parameters:    Size  Location     Type
  1288 ;;  c               2   37[COMRAM] PTR unsigned char 
  1289 ;;		 -> print_buffer(256), 
  1290 ;; Auto vars:     Size  Location     Type
  1291 ;;  z               1   39[COMRAM] unsigned char 
  1292 ;; Return value:  Size  Location     Type
  1293 ;;                  1    wreg      void 
  1294 ;; Registers used:
  1295 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1296 ;; Tracked objects:
  1297 ;;		On entry : 0/0
  1298 ;;		On exit  : 0/0
  1299 ;;		Unchanged: 0/0
  1300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1301 ;;      Params:         2       0       0       0       0       0       0
  1302 ;;      Locals:         1       0       0       0       0       0       0
  1303 ;;      Temps:          0       0       0       0       0       0       0
  1304 ;;      Totals:         3       0       0       0       0       0       0
  1305 ;;Total ram usage:        3 bytes
  1306 ;; Hardware stack levels used:    1
  1307 ;; Hardware stack levels required when called:    4
  1308 ;; This function calls:
  1309 ;;		_uart_send
  1310 ;; This function is called by:
  1311 ;;		_main
  1312 ;; This function uses a non-reentrant model
  1313 ;;
  1314                           
  1315                           	psect	text1
  1316  000D96                     __ptext1:
  1317                           	opt stack 0
  1318  000D96                     _uart_send_string:
  1319                           	opt stack 26
  1320                           
  1321                           ;uart_layer.c: 51: uint8_t z=0;
  1322                           
  1323                           ; BSR set to: 0
  1324                           ;incstack = 0
  1325  000D96  0E00               	movlw	0
  1326  000D98  6E28               	movwf	uart_send_string@z,c
  1327                           
  1328                           ;uart_layer.c: 52: while(c[z] != '\0'){
  1329  000D9A  D00C               	goto	l1689
  1330  000D9C                     l1685:
  1331                           
  1332                           ;uart_layer.c: 53: uart_send(c[z]);
  1333  000D9C  5028               	movf	uart_send_string@z,w,c
  1334  000D9E  0D01               	mullw	1
  1335  000DA0  50F3               	movf	prodl,w,c
  1336  000DA2  2426               	addwf	uart_send_string@c,w,c
  1337  000DA4  6ED9               	movwf	fsr2l,c
  1338  000DA6  50F4               	movf	prodh,w,c
  1339  000DA8  2027               	addwfc	uart_send_string@c+1,w,c
  1340  000DAA  6EDA               	movwf	fsr2h,c
  1341  000DAC  50DF               	movf	indf2,w,c
  1342  000DAE  EC44  F007         	call	_uart_send
  1343                           
  1344                           ;uart_layer.c: 54: z++;
  1345  000DB2  2A28               	incf	uart_send_string@z,f,c
  1346  000DB4                     l1689:
  1347  000DB4  5028               	movf	uart_send_string@z,w,c
  1348  000DB6  0D01               	mullw	1
  1349  000DB8  50F3               	movf	prodl,w,c
  1350  000DBA  2426               	addwf	uart_send_string@c,w,c
  1351  000DBC  6ED9               	movwf	fsr2l,c
  1352  000DBE  50F4               	movf	prodh,w,c
  1353  000DC0  2027               	addwfc	uart_send_string@c+1,w,c
  1354  000DC2  6EDA               	movwf	fsr2h,c
  1355  000DC4  50DF               	movf	indf2,w,c
  1356  000DC6  B4D8               	btfsc	status,2,c
  1357  000DC8  0012               	return	
  1358  000DCA  D7E8               	goto	l1685
  1359  000DCC                     __end_of_uart_send_string:
  1360                           	opt stack 0
  1361                           tblptru	equ	0xFF8
  1362                           tblptrh	equ	0xFF7
  1363                           tblptrl	equ	0xFF6
  1364                           tablat	equ	0xFF5
  1365                           prodh	equ	0xFF4
  1366                           prodl	equ	0xFF3
  1367                           intcon	equ	0xFF2
  1368                           postinc0	equ	0xFEE
  1369                           wreg	equ	0xFE8
  1370                           postinc1	equ	0xFE6
  1371                           postdec1	equ	0xFE5
  1372                           fsr1h	equ	0xFE2
  1373                           fsr1l	equ	0xFE1
  1374                           indf2	equ	0xFDF
  1375                           postinc2	equ	0xFDE
  1376                           fsr2h	equ	0xFDA
  1377                           fsr2l	equ	0xFD9
  1378                           status	equ	0xFD8
  1379                           
  1380 ;; *************** function _uart_send *****************
  1381 ;; Defined at:
  1382 ;;		line 24 in file "uart_layer.c"
  1383 ;; Parameters:    Size  Location     Type
  1384 ;;  c               1    wreg     unsigned char 
  1385 ;; Auto vars:     Size  Location     Type
  1386 ;;  c               1   36[COMRAM] unsigned char 
  1387 ;; Return value:  Size  Location     Type
  1388 ;;                  1    wreg      void 
  1389 ;; Registers used:
  1390 ;;		wreg
  1391 ;; Tracked objects:
  1392 ;;		On entry : 0/0
  1393 ;;		On exit  : 0/0
  1394 ;;		Unchanged: 0/0
  1395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1396 ;;      Params:         0       0       0       0       0       0       0
  1397 ;;      Locals:         1       0       0       0       0       0       0
  1398 ;;      Temps:          0       0       0       0       0       0       0
  1399 ;;      Totals:         1       0       0       0       0       0       0
  1400 ;;Total ram usage:        1 bytes
  1401 ;; Hardware stack levels used:    1
  1402 ;; Hardware stack levels required when called:    3
  1403 ;; This function calls:
  1404 ;;		Nothing
  1405 ;; This function is called by:
  1406 ;;		_uart_send_string
  1407 ;;		_uart_send_array
  1408 ;; This function uses a non-reentrant model
  1409 ;;
  1410                           
  1411                           	psect	text2
  1412  000E88                     __ptext2:
  1413                           	opt stack 0
  1414  000E88                     _uart_send:
  1415                           	opt stack 26
  1416                           
  1417                           ;incstack = 0
  1418                           ;uart_send@c stored from wreg
  1419  000E88  6E25               	movwf	uart_send@c,c
  1420                           
  1421                           ;uart_layer.c: 25: TXREG=c;
  1422  000E8A  C025  FFAD         	movff	uart_send@c,4013	;volatile
  1423                           
  1424                           ;uart_layer.c: 26: while(TXSTAbits.TRMT==0){
  1425  000E8E  D001               	goto	l28
  1426  000E90                     l29:
  1427                           
  1428                           ;uart_layer.c: 27: __nop();
  1429  000E90  F000               	nop	
  1430  000E92                     l28:
  1431  000E92  B2AC               	btfsc	4012,1,c	;volatile
  1432  000E94  0012               	return	
  1433  000E96  D7FC               	goto	l29
  1434  000E98                     __end_of_uart_send:
  1435                           	opt stack 0
  1436                           tblptru	equ	0xFF8
  1437                           tblptrh	equ	0xFF7
  1438                           tblptrl	equ	0xFF6
  1439                           tablat	equ	0xFF5
  1440                           prodh	equ	0xFF4
  1441                           prodl	equ	0xFF3
  1442                           intcon	equ	0xFF2
  1443                           postinc0	equ	0xFEE
  1444                           wreg	equ	0xFE8
  1445                           postinc1	equ	0xFE6
  1446                           postdec1	equ	0xFE5
  1447                           fsr1h	equ	0xFE2
  1448                           fsr1l	equ	0xFE1
  1449                           indf2	equ	0xFDF
  1450                           postinc2	equ	0xFDE
  1451                           fsr2h	equ	0xFDA
  1452                           fsr2l	equ	0xFD9
  1453                           status	equ	0xFD8
  1454                           
  1455 ;; *************** function _uart_init *****************
  1456 ;; Defined at:
  1457 ;;		line 4 in file "uart_layer.c"
  1458 ;; Parameters:    Size  Location     Type
  1459 ;;  gen_reg         2   36[COMRAM] unsigned int 
  1460 ;;  sync            2   38[COMRAM] unsigned int 
  1461 ;;  brgh            2   40[COMRAM] unsigned int 
  1462 ;;  brg16           2   42[COMRAM] unsigned int 
  1463 ;; Auto vars:     Size  Location     Type
  1464 ;;		None
  1465 ;; Return value:  Size  Location     Type
  1466 ;;                  1    wreg      void 
  1467 ;; Registers used:
  1468 ;;		wreg, status,2
  1469 ;; Tracked objects:
  1470 ;;		On entry : 0/0
  1471 ;;		On exit  : 0/0
  1472 ;;		Unchanged: 0/0
  1473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1474 ;;      Params:         8       0       0       0       0       0       0
  1475 ;;      Locals:         0       0       0       0       0       0       0
  1476 ;;      Temps:          0       0       0       0       0       0       0
  1477 ;;      Totals:         8       0       0       0       0       0       0
  1478 ;;Total ram usage:        8 bytes
  1479 ;; Hardware stack levels used:    1
  1480 ;; Hardware stack levels required when called:    3
  1481 ;; This function calls:
  1482 ;;		Nothing
  1483 ;; This function is called by:
  1484 ;;		_main
  1485 ;; This function uses a non-reentrant model
  1486 ;;
  1487                           
  1488                           	psect	text3
  1489  000DCC                     __ptext3:
  1490                           	opt stack 0
  1491  000DCC                     _uart_init:
  1492                           	opt stack 27
  1493                           
  1494                           ;uart_layer.c: 6: TRISCbits.RC7=1;
  1495                           
  1496                           ;incstack = 0
  1497  000DCC  8E94               	bsf	3988,7,c	;volatile
  1498                           
  1499                           ;uart_layer.c: 7: TRISCbits.RC6=1;
  1500  000DCE  8C94               	bsf	3988,6,c	;volatile
  1501                           
  1502                           ;uart_layer.c: 9: SPBRGH = (gen_reg & 0xFF00) >> 8;
  1503  000DD0  5026               	movf	uart_init@gen_reg+1,w,c
  1504  000DD2  6EB0               	movwf	4016,c	;volatile
  1505                           
  1506                           ;uart_layer.c: 10: SPBRG = gen_reg & 0x00FF;
  1507  000DD4  C025  FFAF         	movff	uart_init@gen_reg,4015	;volatile
  1508                           
  1509                           ;uart_layer.c: 12: RCSTAbits.CREN = 1;
  1510  000DD8  88AB               	bsf	4011,4,c	;volatile
  1511                           
  1512                           ;uart_layer.c: 13: RCSTAbits.SPEN = 1;
  1513  000DDA  8EAB               	bsf	4011,7,c	;volatile
  1514                           
  1515                           ;uart_layer.c: 14: BAUDCONbits.BRG16 = brg16;
  1516  000DDC  B02B               	btfsc	uart_init@brg16,0,c
  1517  000DDE  D002               	bra	u1085
  1518  000DE0  96B8               	bcf	4024,3,c	;volatile
  1519  000DE2  D001               	bra	u1086
  1520  000DE4                     u1085:
  1521  000DE4  86B8               	bsf	4024,3,c	;volatile
  1522  000DE6                     u1086:
  1523                           
  1524                           ;uart_layer.c: 16: TXSTAbits.SYNC = sync;
  1525  000DE6  B027               	btfsc	uart_init@sync,0,c
  1526  000DE8  D002               	bra	u1095
  1527  000DEA  98AC               	bcf	4012,4,c	;volatile
  1528  000DEC  D001               	bra	u1096
  1529  000DEE                     u1095:
  1530  000DEE  88AC               	bsf	4012,4,c	;volatile
  1531  000DF0                     u1096:
  1532                           
  1533                           ;uart_layer.c: 17: TXSTAbits.BRGH = brgh;
  1534  000DF0  B029               	btfsc	uart_init@brgh,0,c
  1535  000DF2  D002               	bra	u1105
  1536  000DF4  94AC               	bcf	4012,2,c	;volatile
  1537  000DF6  D001               	bra	u1106
  1538  000DF8                     u1105:
  1539  000DF8  84AC               	bsf	4012,2,c	;volatile
  1540  000DFA                     u1106:
  1541                           
  1542                           ;uart_layer.c: 18: TXSTAbits.TXEN = 1;
  1543  000DFA  8AAC               	bsf	4012,5,c	;volatile
  1544                           
  1545                           ;uart_layer.c: 20: IPR1bits.RCIP=1;
  1546  000DFC  8A9F               	bsf	3999,5,c	;volatile
  1547                           
  1548                           ;uart_layer.c: 21: PIE1bits.RCIE=1;
  1549  000DFE  8A9D               	bsf	3997,5,c	;volatile
  1550  000E00  0012               	return		;funcret
  1551  000E02                     __end_of_uart_init:
  1552                           	opt stack 0
  1553                           tblptru	equ	0xFF8
  1554                           tblptrh	equ	0xFF7
  1555                           tblptrl	equ	0xFF6
  1556                           tablat	equ	0xFF5
  1557                           prodh	equ	0xFF4
  1558                           prodl	equ	0xFF3
  1559                           intcon	equ	0xFF2
  1560                           postinc0	equ	0xFEE
  1561                           wreg	equ	0xFE8
  1562                           postinc1	equ	0xFE6
  1563                           postdec1	equ	0xFE5
  1564                           fsr1h	equ	0xFE2
  1565                           fsr1l	equ	0xFE1
  1566                           indf2	equ	0xFDF
  1567                           postinc2	equ	0xFDE
  1568                           fsr2h	equ	0xFDA
  1569                           fsr2l	equ	0xFD9
  1570                           status	equ	0xFD8
  1571                           
  1572 ;; *************** function _srand *****************
  1573 ;; Defined at:
  1574 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\rand.c"
  1575 ;; Parameters:    Size  Location     Type
  1576 ;;  x               2   36[COMRAM] unsigned int 
  1577 ;; Auto vars:     Size  Location     Type
  1578 ;;		None
  1579 ;; Return value:  Size  Location     Type
  1580 ;;                  1    wreg      void 
  1581 ;; Registers used:
  1582 ;;		status,2
  1583 ;; Tracked objects:
  1584 ;;		On entry : 0/0
  1585 ;;		On exit  : 0/0
  1586 ;;		Unchanged: 0/0
  1587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1588 ;;      Params:         2       0       0       0       0       0       0
  1589 ;;      Locals:         0       0       0       0       0       0       0
  1590 ;;      Temps:          0       0       0       0       0       0       0
  1591 ;;      Totals:         2       0       0       0       0       0       0
  1592 ;;Total ram usage:        2 bytes
  1593 ;; Hardware stack levels used:    1
  1594 ;; Hardware stack levels required when called:    3
  1595 ;; This function calls:
  1596 ;;		Nothing
  1597 ;; This function is called by:
  1598 ;;		_main
  1599 ;; This function uses a non-reentrant model
  1600 ;;
  1601                           
  1602                           	psect	text4
  1603  000E98                     __ptext4:
  1604                           	opt stack 0
  1605  000E98                     _srand:
  1606                           	opt stack 27
  1607                           
  1608                           ;incstack = 0
  1609  000E98  C025  F056         	movff	srand@x,_randx
  1610  000E9C  C026  F057         	movff	srand@x+1,_randx+1
  1611  000EA0  6A58               	clrf	_randx+2,c
  1612  000EA2  6A59               	clrf	_randx+3,c
  1613  000EA4  0012               	return		;funcret
  1614  000EA6                     __end_of_srand:
  1615                           	opt stack 0
  1616                           tblptru	equ	0xFF8
  1617                           tblptrh	equ	0xFF7
  1618                           tblptrl	equ	0xFF6
  1619                           tablat	equ	0xFF5
  1620                           prodh	equ	0xFF4
  1621                           prodl	equ	0xFF3
  1622                           intcon	equ	0xFF2
  1623                           postinc0	equ	0xFEE
  1624                           wreg	equ	0xFE8
  1625                           postinc1	equ	0xFE6
  1626                           postdec1	equ	0xFE5
  1627                           fsr1h	equ	0xFE2
  1628                           fsr1l	equ	0xFE1
  1629                           indf2	equ	0xFDF
  1630                           postinc2	equ	0xFDE
  1631                           fsr2h	equ	0xFDA
  1632                           fsr2l	equ	0xFD9
  1633                           status	equ	0xFD8
  1634                           
  1635 ;; *************** function _sprintf *****************
  1636 ;; Defined at:
  1637 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  1638 ;; Parameters:    Size  Location     Type
  1639 ;;  sp              2   48[COMRAM] PTR unsigned char 
  1640 ;;		 -> print_buffer(256), 
  1641 ;;  f               2   50[COMRAM] PTR const unsigned char 
  1642 ;;		 -> STR_2(19), STR_1(16), 
  1643 ;; Auto vars:     Size  Location     Type
  1644 ;;  tmpval          4    0        struct .
  1645 ;;  cp              3    0        PTR const unsigned char 
  1646 ;;  val             2   61[COMRAM] unsigned int 
  1647 ;;  ap              2   57[COMRAM] PTR void [1]
  1648 ;;		 -> ?_sprintf(2), 
  1649 ;;  len             2    0        unsigned int 
  1650 ;;  c               1   63[COMRAM] char 
  1651 ;;  prec            1   60[COMRAM] char 
  1652 ;;  flag            1   59[COMRAM] unsigned char 
  1653 ;; Return value:  Size  Location     Type
  1654 ;;                  2   48[COMRAM] int 
  1655 ;; Registers used:
  1656 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1657 ;; Tracked objects:
  1658 ;;		On entry : 0/0
  1659 ;;		On exit  : 0/0
  1660 ;;		Unchanged: 0/0
  1661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1662 ;;      Params:         8       0       0       0       0       0       0
  1663 ;;      Locals:         7       0       0       0       0       0       0
  1664 ;;      Temps:          1       0       0       0       0       0       0
  1665 ;;      Totals:        16       0       0       0       0       0       0
  1666 ;;Total ram usage:       16 bytes
  1667 ;; Hardware stack levels used:    1
  1668 ;; Hardware stack levels required when called:    4
  1669 ;; This function calls:
  1670 ;;		___lwdiv
  1671 ;;		___lwmod
  1672 ;; This function is called by:
  1673 ;;		_main
  1674 ;; This function uses a non-reentrant model
  1675 ;;
  1676                           
  1677                           	psect	text5
  1678  0009DC                     __ptext5:
  1679                           	opt stack 0
  1680  0009DC                     _sprintf:
  1681                           	opt stack 26
  1682                           
  1683                           ;doprnt.c: 494: va_list ap;
  1684                           ;doprnt.c: 499: signed char c;
  1685                           ;doprnt.c: 506: signed char prec;
  1686                           ;doprnt.c: 508: unsigned char flag;
  1687                           ;doprnt.c: 523: union {
  1688                           ;doprnt.c: 524: unsigned long vd;
  1689                           ;doprnt.c: 525: double integ;
  1690                           ;doprnt.c: 526: } tmpval;
  1691                           ;doprnt.c: 528: unsigned int val;
  1692                           ;doprnt.c: 529: unsigned len;
  1693                           ;doprnt.c: 530: const char * cp;
  1694                           ;doprnt.c: 533: *ap = __va_start();
  1695                           
  1696                           ;incstack = 0
  1697  0009DC  0E35               	movlw	low (?_sprintf+4)
  1698  0009DE  6E3A               	movwf	sprintf@ap,c
  1699  0009E0  0E00               	movlw	high (?_sprintf+4)
  1700  0009E2  6E3B               	movwf	sprintf@ap+1,c
  1701                           
  1702                           ;doprnt.c: 536: while(c = *f++) {
  1703  0009E4  D08C               	goto	l1753
  1704  0009E6                     l1701:
  1705                           
  1706                           ;doprnt.c: 538: if(c != '%')
  1707  0009E6  0E25               	movlw	37
  1708  0009E8  1840               	xorwf	sprintf@c,w,c
  1709  0009EA  B4D8               	btfsc	status,2,c
  1710  0009EC  D009               	goto	l1707
  1711                           
  1712                           ;doprnt.c: 540: {
  1713                           ;doprnt.c: 541: ((*sp++ = (c)));
  1714  0009EE  C031  FFD9         	movff	sprintf@sp,fsr2l
  1715  0009F2  C032  FFDA         	movff	sprintf@sp+1,fsr2h
  1716  0009F6  C040  FFDF         	movff	sprintf@c,indf2
  1717  0009FA  4A31               	infsnz	sprintf@sp,f,c
  1718  0009FC  2A32               	incf	sprintf@sp+1,f,c
  1719                           
  1720                           ;doprnt.c: 542: continue;
  1721  0009FE  D07F               	goto	l1753
  1722  000A00                     l1707:
  1723                           
  1724                           ;doprnt.c: 543: }
  1725                           ;doprnt.c: 548: flag = 0;
  1726  000A00  0E00               	movlw	0
  1727  000A02  6E3C               	movwf	sprintf@flag,c
  1728                           
  1729                           ;doprnt.c: 822: }
  1730                           
  1731                           ;doprnt.c: 813: continue;
  1732                           
  1733                           ;doprnt.c: 802: default:
  1734                           
  1735                           ;doprnt.c: 698: case 'i':
  1736                           ;doprnt.c: 699: break;
  1737                           
  1738                           ;doprnt.c: 697: case 'd':
  1739                           
  1740                           ;doprnt.c: 638: goto alldone;
  1741                           
  1742                           ;doprnt.c: 637: case 0:
  1743                           
  1744                           ;doprnt.c: 635: switch(c = *f++) {
  1745  000A04  C033  FFF6         	movff	sprintf@f,tblptrl
  1746  000A08  C034  FFF7         	movff	sprintf@f+1,tblptrh
  1747  000A0C  4A33               	infsnz	sprintf@f,f,c
  1748  000A0E  2A34               	incf	sprintf@f+1,f,c
  1749  000A10                     	if	0	;tblptru may be non-zero
  1750  000A10                     	endif
  1751  000A10                     	if	0	;tblptru may be non-zero
  1752  000A10                     	endif
  1753  000A10  0008               	tblrd		*
  1754  000A12  CFF5 F040          	movff	tablat,sprintf@c
  1755  000A16  5040               	movf	sprintf@c,w,c
  1756                           
  1757                           ; Switch size 1, requested type "space"
  1758                           ; Number of cases is 3, Range of values is 0 to 105
  1759                           ; switch strategies available:
  1760                           ; Name         Instructions Cycles
  1761                           ; simple_byte           10     6 (average)
  1762                           ;	Chosen strategy is simple_byte
  1763  000A18  0A00               	xorlw	0	; case 0
  1764  000A1A  B4D8               	btfsc	status,2,c
  1765  000A1C  D07C               	goto	l1755
  1766  000A1E  0A64               	xorlw	100	; case 100
  1767  000A20  B4D8               	btfsc	status,2,c
  1768  000A22  D003               	goto	l1713
  1769  000A24  0A0D               	xorlw	13	; case 105
  1770  000A26  A4D8               	btfss	status,2,c
  1771  000A28  D06A               	goto	l1753
  1772  000A2A                     l1713:
  1773                           
  1774                           ;doprnt.c: 1253: {
  1775                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1776  000A2A  C03A  FFD9         	movff	sprintf@ap,fsr2l
  1777  000A2E  C03B  FFDA         	movff	sprintf@ap+1,fsr2h
  1778  000A32  CFDE F03E          	movff	postinc2,sprintf@val
  1779  000A36  CFDD F03F          	movff	postdec2,sprintf@val+1
  1780  000A3A  0E02               	movlw	2
  1781  000A3C  263A               	addwf	sprintf@ap,f,c
  1782  000A3E  0E00               	movlw	0
  1783  000A40  223B               	addwfc	sprintf@ap+1,f,c
  1784                           
  1785                           ;doprnt.c: 1261: if((int)val < 0) {
  1786  000A42  AE3F               	btfss	sprintf@val+1,7,c
  1787  000A44  D006               	goto	l1723
  1788                           
  1789                           ;doprnt.c: 1262: flag |= 0x03;
  1790  000A46  0E03               	movlw	3
  1791  000A48  123C               	iorwf	sprintf@flag,f,c
  1792                           
  1793                           ;doprnt.c: 1263: val = -val;
  1794  000A4A  6C3E               	negf	sprintf@val,c
  1795  000A4C  1E3F               	comf	sprintf@val+1,f,c
  1796  000A4E  B0D8               	btfsc	status,0,c
  1797  000A50  2A3F               	incf	sprintf@val+1,f,c
  1798  000A52                     l1723:
  1799                           
  1800                           ;doprnt.c: 1264: }
  1801                           ;doprnt.c: 1266: }
  1802                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1803  000A52  0E01               	movlw	1
  1804  000A54  6E40               	movwf	sprintf@c,c
  1805  000A56                     l1725:
  1806  000A56  0E05               	movlw	5
  1807  000A58  1840               	xorwf	sprintf@c,w,c
  1808  000A5A  B4D8               	btfsc	status,2,c
  1809  000A5C  D012               	goto	l1737
  1810                           
  1811                           ;doprnt.c: 1306: if(val < dpowers[c])
  1812  000A5E  5040               	movf	sprintf@c,w,c
  1813  000A60  0D02               	mullw	2
  1814  000A62  0E01               	movlw	low _dpowers
  1815  000A64  24F3               	addwf	prodl,w,c
  1816  000A66  6EF6               	movwf	tblptrl,c
  1817  000A68  0E06               	movlw	high _dpowers
  1818  000A6A  20F4               	addwfc	prodh,w,c
  1819  000A6C  6EF7               	movwf	tblptrh,c
  1820  000A6E                     	if	0	;There are less than 3 active tblptr bytes
  1821  000A6E                     	endif
  1822  000A6E  0009               	tblrd		*+
  1823  000A70  50F5               	movf	tablat,w,c
  1824  000A72  5C3E               	subwf	sprintf@val,w,c
  1825  000A74  0009               	tblrd		*+
  1826  000A76  50F5               	movf	tablat,w,c
  1827  000A78  583F               	subwfb	sprintf@val+1,w,c
  1828  000A7A  A0D8               	btfss	status,0,c
  1829  000A7C  D002               	goto	l1737
  1830                           
  1831                           ;doprnt.c: 1307: break;
  1832  000A7E  2A40               	incf	sprintf@c,f,c
  1833  000A80  D7EA               	goto	l1725
  1834  000A82                     l1737:
  1835                           
  1836                           ;doprnt.c: 1422: {
  1837                           ;doprnt.c: 1438: if(flag & 0x03)
  1838  000A82  C03C  F039         	movff	sprintf@flag,??_sprintf
  1839  000A86  0E03               	movlw	3
  1840  000A88  1639               	andwf	??_sprintf,f,c
  1841  000A8A  B4D8               	btfsc	status,2,c
  1842  000A8C  D008               	goto	l1743
  1843                           
  1844                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1845  000A8E  C031  FFD9         	movff	sprintf@sp,fsr2l
  1846  000A92  C032  FFDA         	movff	sprintf@sp+1,fsr2h
  1847  000A96  0E2D               	movlw	45
  1848  000A98  6EDF               	movwf	indf2,c
  1849  000A9A  4A31               	infsnz	sprintf@sp,f,c
  1850  000A9C  2A32               	incf	sprintf@sp+1,f,c
  1851  000A9E                     l1743:
  1852                           
  1853                           ;doprnt.c: 1469: }
  1854                           ;doprnt.c: 1472: prec = c;
  1855  000A9E  C040  F03D         	movff	sprintf@c,sprintf@prec
  1856                           
  1857                           ;doprnt.c: 1474: while(prec--) {
  1858  000AA2  D029               	goto	l1751
  1859  000AA4                     l1745:
  1860                           
  1861                           ;doprnt.c: 1478: {
  1862                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1863  000AA4  503D               	movf	sprintf@prec,w,c
  1864  000AA6  0D02               	mullw	2
  1865  000AA8  0E01               	movlw	low _dpowers
  1866  000AAA  24F3               	addwf	prodl,w,c
  1867  000AAC  6EF6               	movwf	tblptrl,c
  1868  000AAE  0E06               	movlw	high _dpowers
  1869  000AB0  20F4               	addwfc	prodh,w,c
  1870  000AB2  6EF7               	movwf	tblptrh,c
  1871  000AB4                     	if	0	;There are less than 3 active tblptr bytes
  1872  000AB4                     	endif
  1873  000AB4  0009               	tblrd		*+
  1874  000AB6  CFF5 F027          	movff	tablat,___lwdiv@divisor
  1875  000ABA  000A               	tblrd		*-
  1876  000ABC  CFF5 F028          	movff	tablat,___lwdiv@divisor+1
  1877  000AC0  C03E  F025         	movff	sprintf@val,___lwdiv@dividend
  1878  000AC4  C03F  F026         	movff	sprintf@val+1,___lwdiv@dividend+1
  1879  000AC8  EC38  F006         	call	___lwdiv	;wreg free
  1880  000ACC  C025  F02C         	movff	?___lwdiv,___lwmod@dividend
  1881  000AD0  C026  F02D         	movff	?___lwdiv+1,___lwmod@dividend+1
  1882  000AD4  0E00               	movlw	0
  1883  000AD6  6E2F               	movwf	___lwmod@divisor+1,c
  1884  000AD8  0E0A               	movlw	10
  1885  000ADA  6E2E               	movwf	___lwmod@divisor,c
  1886  000ADC  EC8A  F006         	call	___lwmod	;wreg free
  1887  000AE0  502C               	movf	?___lwmod,w,c
  1888  000AE2  0F30               	addlw	48
  1889  000AE4  6E40               	movwf	sprintf@c,c
  1890                           
  1891                           ;doprnt.c: 1523: }
  1892                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1893  000AE6  C031  FFD9         	movff	sprintf@sp,fsr2l
  1894  000AEA  C032  FFDA         	movff	sprintf@sp+1,fsr2h
  1895  000AEE  C040  FFDF         	movff	sprintf@c,indf2
  1896  000AF2  4A31               	infsnz	sprintf@sp,f,c
  1897  000AF4  2A32               	incf	sprintf@sp+1,f,c
  1898  000AF6                     l1751:
  1899  000AF6  063D               	decf	sprintf@prec,f,c
  1900  000AF8  283D               	incf	sprintf@prec,w,c
  1901  000AFA  A4D8               	btfss	status,2,c
  1902  000AFC  D7D3               	goto	l1745
  1903  000AFE                     l1753:
  1904  000AFE  C033  FFF6         	movff	sprintf@f,tblptrl
  1905  000B02  C034  FFF7         	movff	sprintf@f+1,tblptrh
  1906  000B06  4A33               	infsnz	sprintf@f,f,c
  1907  000B08  2A34               	incf	sprintf@f+1,f,c
  1908  000B0A                     	if	0	;tblptru may be non-zero
  1909  000B0A                     	endif
  1910  000B0A                     	if	0	;tblptru may be non-zero
  1911  000B0A                     	endif
  1912  000B0A  0008               	tblrd		*
  1913  000B0C  CFF5 F040          	movff	tablat,sprintf@c
  1914  000B10  5040               	movf	sprintf@c,w,c
  1915  000B12  A4D8               	btfss	status,2,c
  1916  000B14  D768               	goto	l1701
  1917  000B16                     l1755:
  1918                           
  1919                           ;doprnt.c: 1538: *sp = 0;
  1920  000B16  C031  FFD9         	movff	sprintf@sp,fsr2l
  1921  000B1A  C032  FFDA         	movff	sprintf@sp+1,fsr2h
  1922  000B1E  0E00               	movlw	0
  1923  000B20  6EDF               	movwf	indf2,c
  1924  000B22  0012               	return	
  1925  000B24                     __end_of_sprintf:
  1926                           	opt stack 0
  1927                           tblptru	equ	0xFF8
  1928                           tblptrh	equ	0xFF7
  1929                           tblptrl	equ	0xFF6
  1930                           tablat	equ	0xFF5
  1931                           prodh	equ	0xFF4
  1932                           prodl	equ	0xFF3
  1933                           intcon	equ	0xFF2
  1934                           postinc0	equ	0xFEE
  1935                           wreg	equ	0xFE8
  1936                           postinc1	equ	0xFE6
  1937                           postdec1	equ	0xFE5
  1938                           fsr1h	equ	0xFE2
  1939                           fsr1l	equ	0xFE1
  1940                           indf2	equ	0xFDF
  1941                           postinc2	equ	0xFDE
  1942                           postdec2	equ	0xFDD
  1943                           fsr2h	equ	0xFDA
  1944                           fsr2l	equ	0xFD9
  1945                           status	equ	0xFD8
  1946                           
  1947 ;; *************** function ___lwmod *****************
  1948 ;; Defined at:
  1949 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  1950 ;; Parameters:    Size  Location     Type
  1951 ;;  dividend        2   43[COMRAM] unsigned int 
  1952 ;;  divisor         2   45[COMRAM] unsigned int 
  1953 ;; Auto vars:     Size  Location     Type
  1954 ;;  counter         1   47[COMRAM] unsigned char 
  1955 ;; Return value:  Size  Location     Type
  1956 ;;                  2   43[COMRAM] unsigned int 
  1957 ;; Registers used:
  1958 ;;		wreg, status,2, status,0
  1959 ;; Tracked objects:
  1960 ;;		On entry : 0/0
  1961 ;;		On exit  : 0/0
  1962 ;;		Unchanged: 0/0
  1963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1964 ;;      Params:         4       0       0       0       0       0       0
  1965 ;;      Locals:         1       0       0       0       0       0       0
  1966 ;;      Temps:          0       0       0       0       0       0       0
  1967 ;;      Totals:         5       0       0       0       0       0       0
  1968 ;;Total ram usage:        5 bytes
  1969 ;; Hardware stack levels used:    1
  1970 ;; Hardware stack levels required when called:    3
  1971 ;; This function calls:
  1972 ;;		Nothing
  1973 ;; This function is called by:
  1974 ;;		_sprintf
  1975 ;; This function uses a non-reentrant model
  1976 ;;
  1977                           
  1978                           	psect	text6
  1979  000D14                     __ptext6:
  1980                           	opt stack 0
  1981  000D14                     ___lwmod:
  1982                           	opt stack 26
  1983                           
  1984                           ;incstack = 0
  1985  000D14  502E               	movf	___lwmod@divisor,w,c
  1986  000D16  102F               	iorwf	___lwmod@divisor+1,w,c
  1987  000D18  B4D8               	btfsc	status,2,c
  1988  000D1A  D018               	goto	l632
  1989  000D1C  0E01               	movlw	1
  1990  000D1E  6E30               	movwf	___lwmod@counter,c
  1991  000D20  D004               	goto	l1651
  1992  000D22                     l1649:
  1993  000D22  90D8               	bcf	status,0,c
  1994  000D24  362E               	rlcf	___lwmod@divisor,f,c
  1995  000D26  362F               	rlcf	___lwmod@divisor+1,f,c
  1996  000D28  2A30               	incf	___lwmod@counter,f,c
  1997  000D2A                     l1651:
  1998  000D2A  AE2F               	btfss	___lwmod@divisor+1,7,c
  1999  000D2C  D7FA               	goto	l1649
  2000  000D2E                     l1653:
  2001  000D2E  502E               	movf	___lwmod@divisor,w,c
  2002  000D30  5C2C               	subwf	___lwmod@dividend,w,c
  2003  000D32  502F               	movf	___lwmod@divisor+1,w,c
  2004  000D34  582D               	subwfb	___lwmod@dividend+1,w,c
  2005  000D36  A0D8               	btfss	status,0,c
  2006  000D38  D004               	goto	l1657
  2007  000D3A  502E               	movf	___lwmod@divisor,w,c
  2008  000D3C  5E2C               	subwf	___lwmod@dividend,f,c
  2009  000D3E  502F               	movf	___lwmod@divisor+1,w,c
  2010  000D40  5A2D               	subwfb	___lwmod@dividend+1,f,c
  2011  000D42                     l1657:
  2012  000D42  90D8               	bcf	status,0,c
  2013  000D44  322F               	rrcf	___lwmod@divisor+1,f,c
  2014  000D46  322E               	rrcf	___lwmod@divisor,f,c
  2015  000D48  2E30               	decfsz	___lwmod@counter,f,c
  2016  000D4A  D7F1               	goto	l1653
  2017  000D4C                     l632:
  2018  000D4C  C02C  F02C         	movff	___lwmod@dividend,?___lwmod
  2019  000D50  C02D  F02D         	movff	___lwmod@dividend+1,?___lwmod+1
  2020  000D54  0012               	return		;funcret
  2021  000D56                     __end_of___lwmod:
  2022                           	opt stack 0
  2023                           tblptru	equ	0xFF8
  2024                           tblptrh	equ	0xFF7
  2025                           tblptrl	equ	0xFF6
  2026                           tablat	equ	0xFF5
  2027                           prodh	equ	0xFF4
  2028                           prodl	equ	0xFF3
  2029                           intcon	equ	0xFF2
  2030                           postinc0	equ	0xFEE
  2031                           wreg	equ	0xFE8
  2032                           postinc1	equ	0xFE6
  2033                           postdec1	equ	0xFE5
  2034                           fsr1h	equ	0xFE2
  2035                           fsr1l	equ	0xFE1
  2036                           indf2	equ	0xFDF
  2037                           postinc2	equ	0xFDE
  2038                           postdec2	equ	0xFDD
  2039                           fsr2h	equ	0xFDA
  2040                           fsr2l	equ	0xFD9
  2041                           status	equ	0xFD8
  2042                           
  2043 ;; *************** function ___lwdiv *****************
  2044 ;; Defined at:
  2045 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  2046 ;; Parameters:    Size  Location     Type
  2047 ;;  dividend        2   36[COMRAM] unsigned int 
  2048 ;;  divisor         2   38[COMRAM] unsigned int 
  2049 ;; Auto vars:     Size  Location     Type
  2050 ;;  quotient        2   41[COMRAM] unsigned int 
  2051 ;;  counter         1   40[COMRAM] unsigned char 
  2052 ;; Return value:  Size  Location     Type
  2053 ;;                  2   36[COMRAM] unsigned int 
  2054 ;; Registers used:
  2055 ;;		wreg, status,2, status,0
  2056 ;; Tracked objects:
  2057 ;;		On entry : 0/0
  2058 ;;		On exit  : 0/0
  2059 ;;		Unchanged: 0/0
  2060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2061 ;;      Params:         4       0       0       0       0       0       0
  2062 ;;      Locals:         3       0       0       0       0       0       0
  2063 ;;      Temps:          0       0       0       0       0       0       0
  2064 ;;      Totals:         7       0       0       0       0       0       0
  2065 ;;Total ram usage:        7 bytes
  2066 ;; Hardware stack levels used:    1
  2067 ;; Hardware stack levels required when called:    3
  2068 ;; This function calls:
  2069 ;;		Nothing
  2070 ;; This function is called by:
  2071 ;;		_sprintf
  2072 ;; This function uses a non-reentrant model
  2073 ;;
  2074                           
  2075                           	psect	text7
  2076  000C70                     __ptext7:
  2077                           	opt stack 0
  2078  000C70                     ___lwdiv:
  2079                           	opt stack 26
  2080                           
  2081                           ;incstack = 0
  2082  000C70  0E00               	movlw	0
  2083  000C72  6E2B               	movwf	___lwdiv@quotient+1,c
  2084  000C74  0E00               	movlw	0
  2085  000C76  6E2A               	movwf	___lwdiv@quotient,c
  2086  000C78  5027               	movf	___lwdiv@divisor,w,c
  2087  000C7A  1028               	iorwf	___lwdiv@divisor+1,w,c
  2088  000C7C  B4D8               	btfsc	status,2,c
  2089  000C7E  D01C               	goto	l622
  2090  000C80  0E01               	movlw	1
  2091  000C82  6E29               	movwf	___lwdiv@counter,c
  2092  000C84  D004               	goto	l1631
  2093  000C86                     l1629:
  2094  000C86  90D8               	bcf	status,0,c
  2095  000C88  3627               	rlcf	___lwdiv@divisor,f,c
  2096  000C8A  3628               	rlcf	___lwdiv@divisor+1,f,c
  2097  000C8C  2A29               	incf	___lwdiv@counter,f,c
  2098  000C8E                     l1631:
  2099  000C8E  AE28               	btfss	___lwdiv@divisor+1,7,c
  2100  000C90  D7FA               	goto	l1629
  2101  000C92                     l1633:
  2102  000C92  90D8               	bcf	status,0,c
  2103  000C94  362A               	rlcf	___lwdiv@quotient,f,c
  2104  000C96  362B               	rlcf	___lwdiv@quotient+1,f,c
  2105  000C98  5027               	movf	___lwdiv@divisor,w,c
  2106  000C9A  5C25               	subwf	___lwdiv@dividend,w,c
  2107  000C9C  5028               	movf	___lwdiv@divisor+1,w,c
  2108  000C9E  5826               	subwfb	___lwdiv@dividend+1,w,c
  2109  000CA0  A0D8               	btfss	status,0,c
  2110  000CA2  D005               	goto	l1641
  2111  000CA4  5027               	movf	___lwdiv@divisor,w,c
  2112  000CA6  5E25               	subwf	___lwdiv@dividend,f,c
  2113  000CA8  5028               	movf	___lwdiv@divisor+1,w,c
  2114  000CAA  5A26               	subwfb	___lwdiv@dividend+1,f,c
  2115  000CAC  802A               	bsf	___lwdiv@quotient,0,c
  2116  000CAE                     l1641:
  2117  000CAE  90D8               	bcf	status,0,c
  2118  000CB0  3228               	rrcf	___lwdiv@divisor+1,f,c
  2119  000CB2  3227               	rrcf	___lwdiv@divisor,f,c
  2120  000CB4  2E29               	decfsz	___lwdiv@counter,f,c
  2121  000CB6  D7ED               	goto	l1633
  2122  000CB8                     l622:
  2123  000CB8  C02A  F025         	movff	___lwdiv@quotient,?___lwdiv
  2124  000CBC  C02B  F026         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2125  000CC0  0012               	return		;funcret
  2126  000CC2                     __end_of___lwdiv:
  2127                           	opt stack 0
  2128                           tblptru	equ	0xFF8
  2129                           tblptrh	equ	0xFF7
  2130                           tblptrl	equ	0xFF6
  2131                           tablat	equ	0xFF5
  2132                           prodh	equ	0xFF4
  2133                           prodl	equ	0xFF3
  2134                           intcon	equ	0xFF2
  2135                           postinc0	equ	0xFEE
  2136                           wreg	equ	0xFE8
  2137                           postinc1	equ	0xFE6
  2138                           postdec1	equ	0xFE5
  2139                           fsr1h	equ	0xFE2
  2140                           fsr1l	equ	0xFE1
  2141                           indf2	equ	0xFDF
  2142                           postinc2	equ	0xFDE
  2143                           postdec2	equ	0xFDD
  2144                           fsr2h	equ	0xFDA
  2145                           fsr2l	equ	0xFD9
  2146                           status	equ	0xFD8
  2147                           
  2148 ;; *************** function _rand *****************
  2149 ;; Defined at:
  2150 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\rand.c"
  2151 ;; Parameters:    Size  Location     Type
  2152 ;;		None
  2153 ;; Auto vars:     Size  Location     Type
  2154 ;;		None
  2155 ;; Return value:  Size  Location     Type
  2156 ;;                  2   48[COMRAM] int 
  2157 ;; Registers used:
  2158 ;;		wreg, status,2, status,0, cstack
  2159 ;; Tracked objects:
  2160 ;;		On entry : 0/0
  2161 ;;		On exit  : 0/0
  2162 ;;		Unchanged: 0/0
  2163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2164 ;;      Params:         2       0       0       0       0       0       0
  2165 ;;      Locals:         0       0       0       0       0       0       0
  2166 ;;      Temps:          0       0       0       0       0       0       0
  2167 ;;      Totals:         2       0       0       0       0       0       0
  2168 ;;Total ram usage:        2 bytes
  2169 ;; Hardware stack levels used:    1
  2170 ;; Hardware stack levels required when called:    4
  2171 ;; This function calls:
  2172 ;;		___lmul
  2173 ;; This function is called by:
  2174 ;;		_main
  2175 ;; This function uses a non-reentrant model
  2176 ;;
  2177                           
  2178                           	psect	text8
  2179  000CC2                     __ptext8:
  2180                           	opt stack 0
  2181  000CC2                     _rand:
  2182                           	opt stack 26
  2183                           
  2184                           ;incstack = 0
  2185  000CC2  C056  F025         	movff	_randx,___lmul@multiplier
  2186  000CC6  C057  F026         	movff	_randx+1,___lmul@multiplier+1
  2187  000CCA  C058  F027         	movff	_randx+2,___lmul@multiplier+2
  2188  000CCE  C059  F028         	movff	_randx+3,___lmul@multiplier+3
  2189  000CD2  0E6D               	movlw	109
  2190  000CD4  6E29               	movwf	___lmul@multiplicand,c
  2191  000CD6  0E4E               	movlw	78
  2192  000CD8  6E2A               	movwf	___lmul@multiplicand+1,c
  2193  000CDA  0EC6               	movlw	198
  2194  000CDC  6E2B               	movwf	___lmul@multiplicand+2,c
  2195  000CDE  0E41               	movlw	65
  2196  000CE0  6E2C               	movwf	___lmul@multiplicand+3,c
  2197  000CE2  EC0D  F006         	call	___lmul	;wreg free
  2198  000CE6  C025  F056         	movff	?___lmul,_randx
  2199  000CEA  C026  F057         	movff	?___lmul+1,_randx+1
  2200  000CEE  C027  F058         	movff	?___lmul+2,_randx+2
  2201  000CF2  C028  F059         	movff	?___lmul+3,_randx+3
  2202  000CF6  0E39               	movlw	57
  2203  000CF8  2656               	addwf	_randx,f,c
  2204  000CFA  0E30               	movlw	48
  2205  000CFC  2257               	addwfc	_randx+1,f,c
  2206  000CFE  0E00               	movlw	0
  2207  000D00  2258               	addwfc	_randx+2,f,c
  2208  000D02  0E00               	movlw	0
  2209  000D04  2259               	addwfc	_randx+3,f,c
  2210  000D06  0EFF               	movlw	255
  2211  000D08  1458               	andwf	_randx+2,w,c
  2212  000D0A  6E31               	movwf	?_rand,c
  2213  000D0C  0E7F               	movlw	127
  2214  000D0E  1459               	andwf	_randx+3,w,c
  2215  000D10  6E32               	movwf	?_rand+1,c
  2216  000D12  0012               	return	
  2217  000D14                     __end_of_rand:
  2218                           	opt stack 0
  2219                           tblptru	equ	0xFF8
  2220                           tblptrh	equ	0xFF7
  2221                           tblptrl	equ	0xFF6
  2222                           tablat	equ	0xFF5
  2223                           prodh	equ	0xFF4
  2224                           prodl	equ	0xFF3
  2225                           intcon	equ	0xFF2
  2226                           postinc0	equ	0xFEE
  2227                           wreg	equ	0xFE8
  2228                           postinc1	equ	0xFE6
  2229                           postdec1	equ	0xFE5
  2230                           fsr1h	equ	0xFE2
  2231                           fsr1l	equ	0xFE1
  2232                           indf2	equ	0xFDF
  2233                           postinc2	equ	0xFDE
  2234                           postdec2	equ	0xFDD
  2235                           fsr2h	equ	0xFDA
  2236                           fsr2l	equ	0xFD9
  2237                           status	equ	0xFD8
  2238                           
  2239 ;; *************** function ___lmul *****************
  2240 ;; Defined at:
  2241 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
  2242 ;; Parameters:    Size  Location     Type
  2243 ;;  multiplier      4   36[COMRAM] unsigned long 
  2244 ;;  multiplicand    4   40[COMRAM] unsigned long 
  2245 ;; Auto vars:     Size  Location     Type
  2246 ;;  product         4   44[COMRAM] unsigned long 
  2247 ;; Return value:  Size  Location     Type
  2248 ;;                  4   36[COMRAM] unsigned long 
  2249 ;; Registers used:
  2250 ;;		wreg, status,2, status,0
  2251 ;; Tracked objects:
  2252 ;;		On entry : 0/0
  2253 ;;		On exit  : 0/0
  2254 ;;		Unchanged: 0/0
  2255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2256 ;;      Params:         8       0       0       0       0       0       0
  2257 ;;      Locals:         4       0       0       0       0       0       0
  2258 ;;      Temps:          0       0       0       0       0       0       0
  2259 ;;      Totals:        12       0       0       0       0       0       0
  2260 ;;Total ram usage:       12 bytes
  2261 ;; Hardware stack levels used:    1
  2262 ;; Hardware stack levels required when called:    3
  2263 ;; This function calls:
  2264 ;;		Nothing
  2265 ;; This function is called by:
  2266 ;;		_rand
  2267 ;; This function uses a non-reentrant model
  2268 ;;
  2269                           
  2270                           	psect	text9
  2271  000C1A                     __ptext9:
  2272                           	opt stack 0
  2273  000C1A                     ___lmul:
  2274                           	opt stack 26
  2275                           
  2276                           ;incstack = 0
  2277  000C1A  0E00               	movlw	0
  2278  000C1C  6E2D               	movwf	___lmul@product,c
  2279  000C1E  0E00               	movlw	0
  2280  000C20  6E2E               	movwf	___lmul@product+1,c
  2281  000C22  0E00               	movlw	0
  2282  000C24  6E2F               	movwf	___lmul@product+2,c
  2283  000C26  0E00               	movlw	0
  2284  000C28  6E30               	movwf	___lmul@product+3,c
  2285  000C2A                     l1615:
  2286  000C2A  A025               	btfss	___lmul@multiplier,0,c
  2287  000C2C  D008               	goto	l1619
  2288  000C2E  5029               	movf	___lmul@multiplicand,w,c
  2289  000C30  262D               	addwf	___lmul@product,f,c
  2290  000C32  502A               	movf	___lmul@multiplicand+1,w,c
  2291  000C34  222E               	addwfc	___lmul@product+1,f,c
  2292  000C36  502B               	movf	___lmul@multiplicand+2,w,c
  2293  000C38  222F               	addwfc	___lmul@product+2,f,c
  2294  000C3A  502C               	movf	___lmul@multiplicand+3,w,c
  2295  000C3C  2230               	addwfc	___lmul@product+3,f,c
  2296  000C3E                     l1619:
  2297  000C3E  90D8               	bcf	status,0,c
  2298  000C40  3629               	rlcf	___lmul@multiplicand,f,c
  2299  000C42  362A               	rlcf	___lmul@multiplicand+1,f,c
  2300  000C44  362B               	rlcf	___lmul@multiplicand+2,f,c
  2301  000C46  362C               	rlcf	___lmul@multiplicand+3,f,c
  2302  000C48  90D8               	bcf	status,0,c
  2303  000C4A  3228               	rrcf	___lmul@multiplier+3,f,c
  2304  000C4C  3227               	rrcf	___lmul@multiplier+2,f,c
  2305  000C4E  3226               	rrcf	___lmul@multiplier+1,f,c
  2306  000C50  3225               	rrcf	___lmul@multiplier,f,c
  2307  000C52  5025               	movf	___lmul@multiplier,w,c
  2308  000C54  1026               	iorwf	___lmul@multiplier+1,w,c
  2309  000C56  1027               	iorwf	___lmul@multiplier+2,w,c
  2310  000C58  1028               	iorwf	___lmul@multiplier+3,w,c
  2311  000C5A  A4D8               	btfss	status,2,c
  2312  000C5C  D7E6               	goto	l1615
  2313  000C5E  C02D  F025         	movff	___lmul@product,?___lmul
  2314  000C62  C02E  F026         	movff	___lmul@product+1,?___lmul+1
  2315  000C66  C02F  F027         	movff	___lmul@product+2,?___lmul+2
  2316  000C6A  C030  F028         	movff	___lmul@product+3,?___lmul+3
  2317  000C6E  0012               	return		;funcret
  2318  000C70                     __end_of___lmul:
  2319                           	opt stack 0
  2320                           tblptru	equ	0xFF8
  2321                           tblptrh	equ	0xFF7
  2322                           tblptrl	equ	0xFF6
  2323                           tablat	equ	0xFF5
  2324                           prodh	equ	0xFF4
  2325                           prodl	equ	0xFF3
  2326                           intcon	equ	0xFF2
  2327                           postinc0	equ	0xFEE
  2328                           wreg	equ	0xFE8
  2329                           postinc1	equ	0xFE6
  2330                           postdec1	equ	0xFE5
  2331                           fsr1h	equ	0xFE2
  2332                           fsr1l	equ	0xFE1
  2333                           indf2	equ	0xFDF
  2334                           postinc2	equ	0xFDE
  2335                           postdec2	equ	0xFDD
  2336                           fsr2h	equ	0xFDA
  2337                           fsr2l	equ	0xFD9
  2338                           status	equ	0xFD8
  2339                           
  2340 ;; *************** function _memcpy *****************
  2341 ;; Defined at:
  2342 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\memcpy.c"
  2343 ;; Parameters:    Size  Location     Type
  2344 ;;  d1              2   36[COMRAM] PTR void 
  2345 ;;		 -> main@acc(1), 
  2346 ;;  s1              2   38[COMRAM] PTR const void 
  2347 ;;		 -> ext_eeprom_acc(1), 
  2348 ;;  n               2   40[COMRAM] unsigned int 
  2349 ;; Auto vars:     Size  Location     Type
  2350 ;;  s               2   44[COMRAM] PTR const unsigned char 
  2351 ;;		 -> ext_eeprom_acc(1), 
  2352 ;;  d               2   42[COMRAM] PTR unsigned char 
  2353 ;;		 -> main@acc(1), 
  2354 ;; Return value:  Size  Location     Type
  2355 ;;                  2   36[COMRAM] PTR void 
  2356 ;; Registers used:
  2357 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2358 ;; Tracked objects:
  2359 ;;		On entry : 0/0
  2360 ;;		On exit  : 0/0
  2361 ;;		Unchanged: 0/0
  2362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2363 ;;      Params:         6       0       0       0       0       0       0
  2364 ;;      Locals:         4       0       0       0       0       0       0
  2365 ;;      Temps:          0       0       0       0       0       0       0
  2366 ;;      Totals:        10       0       0       0       0       0       0
  2367 ;;Total ram usage:       10 bytes
  2368 ;; Hardware stack levels used:    1
  2369 ;; Hardware stack levels required when called:    3
  2370 ;; This function calls:
  2371 ;;		Nothing
  2372 ;; This function is called by:
  2373 ;;		_main
  2374 ;; This function uses a non-reentrant model
  2375 ;;
  2376                           
  2377                           	psect	text10
  2378  000D56                     __ptext10:
  2379                           	opt stack 0
  2380  000D56                     _memcpy:
  2381                           	opt stack 27
  2382                           
  2383                           ;incstack = 0
  2384  000D56  C027  F02D         	movff	memcpy@s1,memcpy@s
  2385  000D5A  C028  F02E         	movff	memcpy@s1+1,memcpy@s+1
  2386  000D5E  C025  F02B         	movff	memcpy@d1,memcpy@d
  2387  000D62  C026  F02C         	movff	memcpy@d1+1,memcpy@d+1
  2388  000D66  D00E               	goto	l1775
  2389  000D68                     l1769:
  2390  000D68  C02D  FFD9         	movff	memcpy@s,fsr2l
  2391  000D6C  C02E  FFDA         	movff	memcpy@s+1,fsr2h
  2392  000D70  C02B  FFE1         	movff	memcpy@d,fsr1l
  2393  000D74  C02C  FFE2         	movff	memcpy@d+1,fsr1h
  2394  000D78  CFDF FFE7          	movff	indf2,indf1
  2395  000D7C  4A2D               	infsnz	memcpy@s,f,c
  2396  000D7E  2A2E               	incf	memcpy@s+1,f,c
  2397  000D80  4A2B               	infsnz	memcpy@d,f,c
  2398  000D82  2A2C               	incf	memcpy@d+1,f,c
  2399  000D84                     l1775:
  2400  000D84  0629               	decf	memcpy@n,f,c
  2401  000D86  A0D8               	btfss	status,0,c
  2402  000D88  062A               	decf	memcpy@n+1,f,c
  2403  000D8A  2829               	incf	memcpy@n,w,c
  2404  000D8C  E1ED               	bnz	l1769
  2405  000D8E  282A               	incf	memcpy@n+1,w,c
  2406  000D90  B4D8               	btfsc	status,2,c
  2407  000D92  0012               	return	
  2408  000D94  D7E9               	goto	l1769
  2409  000D96                     __end_of_memcpy:
  2410                           	opt stack 0
  2411                           tblptru	equ	0xFF8
  2412                           tblptrh	equ	0xFF7
  2413                           tblptrl	equ	0xFF6
  2414                           tablat	equ	0xFF5
  2415                           prodh	equ	0xFF4
  2416                           prodl	equ	0xFF3
  2417                           intcon	equ	0xFF2
  2418                           postinc0	equ	0xFEE
  2419                           wreg	equ	0xFE8
  2420                           indf1	equ	0xFE7
  2421                           postinc1	equ	0xFE6
  2422                           postdec1	equ	0xFE5
  2423                           fsr1h	equ	0xFE2
  2424                           fsr1l	equ	0xFE1
  2425                           indf2	equ	0xFDF
  2426                           postinc2	equ	0xFDE
  2427                           postdec2	equ	0xFDD
  2428                           fsr2h	equ	0xFDA
  2429                           fsr2l	equ	0xFD9
  2430                           status	equ	0xFD8
  2431                           
  2432 ;; *************** function _i2c_write *****************
  2433 ;; Defined at:
  2434 ;;		line 22 in file "i2c_layer.c"
  2435 ;; Parameters:    Size  Location     Type
  2436 ;;  i2c_data        1    wreg     unsigned char 
  2437 ;; Auto vars:     Size  Location     Type
  2438 ;;  i2c_data        1   37[COMRAM] unsigned char 
  2439 ;; Return value:  Size  Location     Type
  2440 ;;                  1    wreg      void 
  2441 ;; Registers used:
  2442 ;;		wreg, status,2, status,0, cstack
  2443 ;; Tracked objects:
  2444 ;;		On entry : 0/0
  2445 ;;		On exit  : 0/0
  2446 ;;		Unchanged: 0/0
  2447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2448 ;;      Params:         0       0       0       0       0       0       0
  2449 ;;      Locals:         1       0       0       0       0       0       0
  2450 ;;      Temps:          0       0       0       0       0       0       0
  2451 ;;      Totals:         1       0       0       0       0       0       0
  2452 ;;Total ram usage:        1 bytes
  2453 ;; Hardware stack levels used:    1
  2454 ;; Hardware stack levels required when called:    4
  2455 ;; This function calls:
  2456 ;;		_i2c_is_idle
  2457 ;; This function is called by:
  2458 ;;		_main
  2459 ;; This function uses a non-reentrant model
  2460 ;;
  2461                           
  2462                           	psect	text11
  2463  000E62                     __ptext11:
  2464                           	opt stack 0
  2465  000E62                     _i2c_write:
  2466                           	opt stack 26
  2467                           
  2468                           ;incstack = 0
  2469                           ;i2c_write@i2c_data stored from wreg
  2470  000E62  6E26               	movwf	i2c_write@i2c_data,c
  2471                           
  2472                           ;i2c_layer.c: 23: i2c_is_idle();
  2473  000E64  EC3B  F007         	call	_i2c_is_idle	;wreg free
  2474                           
  2475                           ;i2c_layer.c: 24: SSPBUF = i2c_data;
  2476  000E68  C026  FFC9         	movff	i2c_write@i2c_data,4041	;volatile
  2477  000E6C                     l176:
  2478  000E6C  B0C7               	btfsc	4039,0,c	;volatile
  2479  000E6E  D7FE               	goto	l176
  2480  000E70                     l179:
  2481  000E70  ACC5               	btfss	4037,6,c	;volatile
  2482  000E72  0012               	return	
  2483  000E74  D7FD               	goto	l179
  2484  000E76                     __end_of_i2c_write:
  2485                           	opt stack 0
  2486                           tblptru	equ	0xFF8
  2487                           tblptrh	equ	0xFF7
  2488                           tblptrl	equ	0xFF6
  2489                           tablat	equ	0xFF5
  2490                           prodh	equ	0xFF4
  2491                           prodl	equ	0xFF3
  2492                           intcon	equ	0xFF2
  2493                           postinc0	equ	0xFEE
  2494                           wreg	equ	0xFE8
  2495                           indf1	equ	0xFE7
  2496                           postinc1	equ	0xFE6
  2497                           postdec1	equ	0xFE5
  2498                           fsr1h	equ	0xFE2
  2499                           fsr1l	equ	0xFE1
  2500                           indf2	equ	0xFDF
  2501                           postinc2	equ	0xFDE
  2502                           postdec2	equ	0xFDD
  2503                           fsr2h	equ	0xFDA
  2504                           fsr2l	equ	0xFD9
  2505                           status	equ	0xFD8
  2506                           
  2507 ;; *************** function _i2c_stop *****************
  2508 ;; Defined at:
  2509 ;;		line 17 in file "i2c_layer.c"
  2510 ;; Parameters:    Size  Location     Type
  2511 ;;		None
  2512 ;; Auto vars:     Size  Location     Type
  2513 ;;		None
  2514 ;; Return value:  Size  Location     Type
  2515 ;;                  1    wreg      void 
  2516 ;; Registers used:
  2517 ;;		wreg, status,2, status,0, cstack
  2518 ;; Tracked objects:
  2519 ;;		On entry : 0/0
  2520 ;;		On exit  : 0/0
  2521 ;;		Unchanged: 0/0
  2522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2523 ;;      Params:         0       0       0       0       0       0       0
  2524 ;;      Locals:         0       0       0       0       0       0       0
  2525 ;;      Temps:          0       0       0       0       0       0       0
  2526 ;;      Totals:         0       0       0       0       0       0       0
  2527 ;;Total ram usage:        0 bytes
  2528 ;; Hardware stack levels used:    1
  2529 ;; Hardware stack levels required when called:    4
  2530 ;; This function calls:
  2531 ;;		_i2c_is_idle
  2532 ;; This function is called by:
  2533 ;;		_main
  2534 ;; This function uses a non-reentrant model
  2535 ;;
  2536                           
  2537                           	psect	text12
  2538  000EA6                     __ptext12:
  2539                           	opt stack 0
  2540  000EA6                     _i2c_stop:
  2541                           	opt stack 26
  2542                           
  2543                           ;i2c_layer.c: 18: i2c_is_idle();
  2544                           
  2545                           ;incstack = 0
  2546  000EA6  EC3B  F007         	call	_i2c_is_idle	;wreg free
  2547                           
  2548                           ;i2c_layer.c: 19: SSPCON2bits.PEN = 1;
  2549  000EAA  84C5               	bsf	4037,2,c	;volatile
  2550  000EAC  0012               	return		;funcret
  2551  000EAE                     __end_of_i2c_stop:
  2552                           	opt stack 0
  2553                           tblptru	equ	0xFF8
  2554                           tblptrh	equ	0xFF7
  2555                           tblptrl	equ	0xFF6
  2556                           tablat	equ	0xFF5
  2557                           prodh	equ	0xFF4
  2558                           prodl	equ	0xFF3
  2559                           intcon	equ	0xFF2
  2560                           postinc0	equ	0xFEE
  2561                           wreg	equ	0xFE8
  2562                           indf1	equ	0xFE7
  2563                           postinc1	equ	0xFE6
  2564                           postdec1	equ	0xFE5
  2565                           fsr1h	equ	0xFE2
  2566                           fsr1l	equ	0xFE1
  2567                           indf2	equ	0xFDF
  2568                           postinc2	equ	0xFDE
  2569                           postdec2	equ	0xFDD
  2570                           fsr2h	equ	0xFDA
  2571                           fsr2l	equ	0xFD9
  2572                           status	equ	0xFD8
  2573                           
  2574 ;; *************** function _i2c_start *****************
  2575 ;; Defined at:
  2576 ;;		line 7 in file "i2c_layer.c"
  2577 ;; Parameters:    Size  Location     Type
  2578 ;;		None
  2579 ;; Auto vars:     Size  Location     Type
  2580 ;;		None
  2581 ;; Return value:  Size  Location     Type
  2582 ;;                  1    wreg      void 
  2583 ;; Registers used:
  2584 ;;		wreg, status,2, status,0, cstack
  2585 ;; Tracked objects:
  2586 ;;		On entry : 0/0
  2587 ;;		On exit  : 0/0
  2588 ;;		Unchanged: 0/0
  2589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2590 ;;      Params:         0       0       0       0       0       0       0
  2591 ;;      Locals:         0       0       0       0       0       0       0
  2592 ;;      Temps:          0       0       0       0       0       0       0
  2593 ;;      Totals:         0       0       0       0       0       0       0
  2594 ;;Total ram usage:        0 bytes
  2595 ;; Hardware stack levels used:    1
  2596 ;; Hardware stack levels required when called:    4
  2597 ;; This function calls:
  2598 ;;		_i2c_is_idle
  2599 ;; This function is called by:
  2600 ;;		_main
  2601 ;; This function uses a non-reentrant model
  2602 ;;
  2603                           
  2604                           	psect	text13
  2605  000EAE                     __ptext13:
  2606                           	opt stack 0
  2607  000EAE                     _i2c_start:
  2608                           	opt stack 26
  2609                           
  2610                           ;i2c_layer.c: 8: i2c_is_idle();
  2611                           
  2612                           ;incstack = 0
  2613  000EAE  EC3B  F007         	call	_i2c_is_idle	;wreg free
  2614                           
  2615                           ;i2c_layer.c: 9: SSPCON2bits.SEN = 1;
  2616  000EB2  80C5               	bsf	4037,0,c	;volatile
  2617  000EB4  0012               	return		;funcret
  2618  000EB6                     __end_of_i2c_start:
  2619                           	opt stack 0
  2620                           tblptru	equ	0xFF8
  2621                           tblptrh	equ	0xFF7
  2622                           tblptrl	equ	0xFF6
  2623                           tablat	equ	0xFF5
  2624                           prodh	equ	0xFF4
  2625                           prodl	equ	0xFF3
  2626                           intcon	equ	0xFF2
  2627                           postinc0	equ	0xFEE
  2628                           wreg	equ	0xFE8
  2629                           indf1	equ	0xFE7
  2630                           postinc1	equ	0xFE6
  2631                           postdec1	equ	0xFE5
  2632                           fsr1h	equ	0xFE2
  2633                           fsr1l	equ	0xFE1
  2634                           indf2	equ	0xFDF
  2635                           postinc2	equ	0xFDE
  2636                           postdec2	equ	0xFDD
  2637                           fsr2h	equ	0xFDA
  2638                           fsr2l	equ	0xFD9
  2639                           status	equ	0xFD8
  2640                           
  2641 ;; *************** function _i2c_rep_start *****************
  2642 ;; Defined at:
  2643 ;;		line 12 in file "i2c_layer.c"
  2644 ;; Parameters:    Size  Location     Type
  2645 ;;		None
  2646 ;; Auto vars:     Size  Location     Type
  2647 ;;		None
  2648 ;; Return value:  Size  Location     Type
  2649 ;;                  1    wreg      void 
  2650 ;; Registers used:
  2651 ;;		wreg, status,2, status,0, cstack
  2652 ;; Tracked objects:
  2653 ;;		On entry : 0/0
  2654 ;;		On exit  : 0/0
  2655 ;;		Unchanged: 0/0
  2656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2657 ;;      Params:         0       0       0       0       0       0       0
  2658 ;;      Locals:         0       0       0       0       0       0       0
  2659 ;;      Temps:          0       0       0       0       0       0       0
  2660 ;;      Totals:         0       0       0       0       0       0       0
  2661 ;;Total ram usage:        0 bytes
  2662 ;; Hardware stack levels used:    1
  2663 ;; Hardware stack levels required when called:    4
  2664 ;; This function calls:
  2665 ;;		_i2c_is_idle
  2666 ;; This function is called by:
  2667 ;;		_main
  2668 ;; This function uses a non-reentrant model
  2669 ;;
  2670                           
  2671                           	psect	text14
  2672  000EB6                     __ptext14:
  2673                           	opt stack 0
  2674  000EB6                     _i2c_rep_start:
  2675                           	opt stack 26
  2676                           
  2677                           ;i2c_layer.c: 13: i2c_is_idle();
  2678                           
  2679                           ;incstack = 0
  2680  000EB6  EC3B  F007         	call	_i2c_is_idle	;wreg free
  2681                           
  2682                           ;i2c_layer.c: 14: SSPCON2bits.RSEN = 1;
  2683  000EBA  82C5               	bsf	4037,1,c	;volatile
  2684  000EBC  0012               	return		;funcret
  2685  000EBE                     __end_of_i2c_rep_start:
  2686                           	opt stack 0
  2687                           tblptru	equ	0xFF8
  2688                           tblptrh	equ	0xFF7
  2689                           tblptrl	equ	0xFF6
  2690                           tablat	equ	0xFF5
  2691                           prodh	equ	0xFF4
  2692                           prodl	equ	0xFF3
  2693                           intcon	equ	0xFF2
  2694                           postinc0	equ	0xFEE
  2695                           wreg	equ	0xFE8
  2696                           indf1	equ	0xFE7
  2697                           postinc1	equ	0xFE6
  2698                           postdec1	equ	0xFE5
  2699                           fsr1h	equ	0xFE2
  2700                           fsr1l	equ	0xFE1
  2701                           indf2	equ	0xFDF
  2702                           postinc2	equ	0xFDE
  2703                           postdec2	equ	0xFDD
  2704                           fsr2h	equ	0xFDA
  2705                           fsr2l	equ	0xFD9
  2706                           status	equ	0xFD8
  2707                           
  2708 ;; *************** function _i2c_read *****************
  2709 ;; Defined at:
  2710 ;;		line 29 in file "i2c_layer.c"
  2711 ;; Parameters:    Size  Location     Type
  2712 ;;  ack             1    wreg     unsigned char 
  2713 ;; Auto vars:     Size  Location     Type
  2714 ;;  ack             1   37[COMRAM] unsigned char 
  2715 ;; Return value:  Size  Location     Type
  2716 ;;                  1    wreg      unsigned char 
  2717 ;; Registers used:
  2718 ;;		wreg, status,2, status,0, cstack
  2719 ;; Tracked objects:
  2720 ;;		On entry : 0/0
  2721 ;;		On exit  : 0/0
  2722 ;;		Unchanged: 0/0
  2723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2724 ;;      Params:         0       0       0       0       0       0       0
  2725 ;;      Locals:         1       0       0       0       0       0       0
  2726 ;;      Temps:          0       0       0       0       0       0       0
  2727 ;;      Totals:         1       0       0       0       0       0       0
  2728 ;;Total ram usage:        1 bytes
  2729 ;; Hardware stack levels used:    1
  2730 ;; Hardware stack levels required when called:    4
  2731 ;; This function calls:
  2732 ;;		_i2c_is_idle
  2733 ;; This function is called by:
  2734 ;;		_main
  2735 ;; This function uses a non-reentrant model
  2736 ;;
  2737                           
  2738                           	psect	text15
  2739  000E30                     __ptext15:
  2740                           	opt stack 0
  2741  000E30                     _i2c_read:
  2742                           	opt stack 26
  2743                           
  2744                           ;incstack = 0
  2745                           ;i2c_read@ack stored from wreg
  2746  000E30  6E26               	movwf	i2c_read@ack,c
  2747                           
  2748                           ;i2c_layer.c: 30: i2c_is_idle();
  2749  000E32  EC3B  F007         	call	_i2c_is_idle	;wreg free
  2750                           
  2751                           ;i2c_layer.c: 31: SSPCON2bits.RCEN = 1;
  2752  000E36  86C5               	bsf	4037,3,c	;volatile
  2753  000E38                     l185:
  2754  000E38  A0C7               	btfss	4039,0,c	;volatile
  2755  000E3A  D7FE               	goto	l185
  2756                           
  2757                           ;i2c_layer.c: 33: SSPCON2bits.ACKEN = ack;
  2758  000E3C  B026               	btfsc	i2c_read@ack,0,c
  2759  000E3E  D002               	bra	u1245
  2760  000E40  98C5               	bcf	4037,4,c	;volatile
  2761  000E42  D001               	bra	u1246
  2762  000E44                     u1245:
  2763  000E44  88C5               	bsf	4037,4,c	;volatile
  2764  000E46                     u1246:
  2765                           
  2766                           ;i2c_layer.c: 34: return SSPBUF;
  2767  000E46  50C9               	movf	4041,w,c	;volatile
  2768  000E48  0012               	return	
  2769  000E4A                     __end_of_i2c_read:
  2770                           	opt stack 0
  2771                           tblptru	equ	0xFF8
  2772                           tblptrh	equ	0xFF7
  2773                           tblptrl	equ	0xFF6
  2774                           tablat	equ	0xFF5
  2775                           prodh	equ	0xFF4
  2776                           prodl	equ	0xFF3
  2777                           intcon	equ	0xFF2
  2778                           postinc0	equ	0xFEE
  2779                           wreg	equ	0xFE8
  2780                           indf1	equ	0xFE7
  2781                           postinc1	equ	0xFE6
  2782                           postdec1	equ	0xFE5
  2783                           fsr1h	equ	0xFE2
  2784                           fsr1l	equ	0xFE1
  2785                           indf2	equ	0xFDF
  2786                           postinc2	equ	0xFDE
  2787                           postdec2	equ	0xFDD
  2788                           fsr2h	equ	0xFDA
  2789                           fsr2l	equ	0xFD9
  2790                           status	equ	0xFD8
  2791                           
  2792 ;; *************** function _i2c_is_idle *****************
  2793 ;; Defined at:
  2794 ;;		line 3 in file "i2c_layer.c"
  2795 ;; Parameters:    Size  Location     Type
  2796 ;;		None
  2797 ;; Auto vars:     Size  Location     Type
  2798 ;;		None
  2799 ;; Return value:  Size  Location     Type
  2800 ;;                  1    wreg      void 
  2801 ;; Registers used:
  2802 ;;		wreg, status,2, status,0
  2803 ;; Tracked objects:
  2804 ;;		On entry : 0/0
  2805 ;;		On exit  : 0/0
  2806 ;;		Unchanged: 0/0
  2807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2808 ;;      Params:         0       0       0       0       0       0       0
  2809 ;;      Locals:         0       0       0       0       0       0       0
  2810 ;;      Temps:          1       0       0       0       0       0       0
  2811 ;;      Totals:         1       0       0       0       0       0       0
  2812 ;;Total ram usage:        1 bytes
  2813 ;; Hardware stack levels used:    1
  2814 ;; Hardware stack levels required when called:    3
  2815 ;; This function calls:
  2816 ;;		Nothing
  2817 ;; This function is called by:
  2818 ;;		_i2c_start
  2819 ;;		_i2c_rep_start
  2820 ;;		_i2c_stop
  2821 ;;		_i2c_write
  2822 ;;		_i2c_read
  2823 ;; This function uses a non-reentrant model
  2824 ;;
  2825                           
  2826                           	psect	text16
  2827  000E76                     __ptext16:
  2828                           	opt stack 0
  2829  000E76                     _i2c_is_idle:
  2830                           	opt stack 26
  2831  000E76                     l1609:
  2832  000E76  CFC5 F025          	movff	4037,??_i2c_is_idle	;volatile
  2833  000E7A  0E1F               	movlw	31
  2834  000E7C  1625               	andwf	??_i2c_is_idle,f,c
  2835  000E7E  A4D8               	btfss	status,2,c
  2836  000E80  D7FA               	goto	l1609
  2837  000E82  A4C7               	btfss	4039,2,c	;volatile
  2838  000E84  0012               	return	
  2839  000E86  D7F7               	goto	l1609
  2840  000E88                     __end_of_i2c_is_idle:
  2841                           	opt stack 0
  2842                           tblptru	equ	0xFF8
  2843                           tblptrh	equ	0xFF7
  2844                           tblptrl	equ	0xFF6
  2845                           tablat	equ	0xFF5
  2846                           prodh	equ	0xFF4
  2847                           prodl	equ	0xFF3
  2848                           intcon	equ	0xFF2
  2849                           postinc0	equ	0xFEE
  2850                           wreg	equ	0xFE8
  2851                           indf1	equ	0xFE7
  2852                           postinc1	equ	0xFE6
  2853                           postdec1	equ	0xFE5
  2854                           fsr1h	equ	0xFE2
  2855                           fsr1l	equ	0xFE1
  2856                           indf2	equ	0xFDF
  2857                           postinc2	equ	0xFDE
  2858                           postdec2	equ	0xFDD
  2859                           fsr2h	equ	0xFDA
  2860                           fsr2l	equ	0xFD9
  2861                           status	equ	0xFD8
  2862                           
  2863 ;; *************** function _i2c_init *****************
  2864 ;; Defined at:
  2865 ;;		line 37 in file "i2c_layer.c"
  2866 ;; Parameters:    Size  Location     Type
  2867 ;;		None
  2868 ;; Auto vars:     Size  Location     Type
  2869 ;;		None
  2870 ;; Return value:  Size  Location     Type
  2871 ;;                  1    wreg      void 
  2872 ;; Registers used:
  2873 ;;		wreg, status,2
  2874 ;; Tracked objects:
  2875 ;;		On entry : 0/0
  2876 ;;		On exit  : 0/0
  2877 ;;		Unchanged: 0/0
  2878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2879 ;;      Params:         0       0       0       0       0       0       0
  2880 ;;      Locals:         0       0       0       0       0       0       0
  2881 ;;      Temps:          0       0       0       0       0       0       0
  2882 ;;      Totals:         0       0       0       0       0       0       0
  2883 ;;Total ram usage:        0 bytes
  2884 ;; Hardware stack levels used:    1
  2885 ;; Hardware stack levels required when called:    3
  2886 ;; This function calls:
  2887 ;;		Nothing
  2888 ;; This function is called by:
  2889 ;;		_main
  2890 ;; This function uses a non-reentrant model
  2891 ;;
  2892                           
  2893                           	psect	text17
  2894  000E4A                     __ptext17:
  2895                           	opt stack 0
  2896  000E4A                     _i2c_init:
  2897                           	opt stack 27
  2898                           
  2899                           ;i2c_layer.c: 38: TRISCbits.RC3 = 1;
  2900                           
  2901                           ;incstack = 0
  2902  000E4A  8694               	bsf	3988,3,c	;volatile
  2903                           
  2904                           ;i2c_layer.c: 39: TRISCbits.RC4 = 1;
  2905  000E4C  8894               	bsf	3988,4,c	;volatile
  2906                           
  2907                           ;i2c_layer.c: 40: SSPSTATbits.SMP = 1;
  2908  000E4E  8EC7               	bsf	4039,7,c	;volatile
  2909                           
  2910                           ;i2c_layer.c: 41: SSPSTATbits.CKE = 0;
  2911  000E50  9CC7               	bcf	4039,6,c	;volatile
  2912                           
  2913                           ;i2c_layer.c: 42: SSPCON1bits.SSPM = 0x08;
  2914  000E52  50C6               	movf	4038,w,c	;volatile
  2915  000E54  0BF0               	andlw	-16
  2916  000E56  0908               	iorlw	8
  2917  000E58  6EC6               	movwf	4038,c	;volatile
  2918                           
  2919                           ;i2c_layer.c: 43: SSPADD = 19;
  2920  000E5A  0E13               	movlw	19
  2921  000E5C  6EC8               	movwf	4040,c	;volatile
  2922                           
  2923                           ;i2c_layer.c: 44: SSPCON1bits.SSPEN = 1;
  2924  000E5E  8AC6               	bsf	4038,5,c	;volatile
  2925  000E60  0012               	return		;funcret
  2926  000E62                     __end_of_i2c_init:
  2927                           	opt stack 0
  2928                           tblptru	equ	0xFF8
  2929                           tblptrh	equ	0xFF7
  2930                           tblptrl	equ	0xFF6
  2931                           tablat	equ	0xFF5
  2932                           prodh	equ	0xFF4
  2933                           prodl	equ	0xFF3
  2934                           intcon	equ	0xFF2
  2935                           postinc0	equ	0xFEE
  2936                           wreg	equ	0xFE8
  2937                           indf1	equ	0xFE7
  2938                           postinc1	equ	0xFE6
  2939                           postdec1	equ	0xFE5
  2940                           fsr1h	equ	0xFE2
  2941                           fsr1l	equ	0xFE1
  2942                           indf2	equ	0xFDF
  2943                           postinc2	equ	0xFDE
  2944                           postdec2	equ	0xFDD
  2945                           fsr2h	equ	0xFDA
  2946                           fsr2l	equ	0xFD9
  2947                           status	equ	0xFD8
  2948                           
  2949 ;; *************** function _low_isr *****************
  2950 ;; Defined at:
  2951 ;;		line 147 in file "main.c"
  2952 ;; Parameters:    Size  Location     Type
  2953 ;;		None
  2954 ;; Auto vars:     Size  Location     Type
  2955 ;;		None
  2956 ;; Return value:  Size  Location     Type
  2957 ;;                  1    wreg      void 
  2958 ;; Registers used:
  2959 ;;		None
  2960 ;; Tracked objects:
  2961 ;;		On entry : 0/0
  2962 ;;		On exit  : 0/0
  2963 ;;		Unchanged: 0/0
  2964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2965 ;;      Params:         0       0       0       0       0       0       0
  2966 ;;      Locals:         0       0       0       0       0       0       0
  2967 ;;      Temps:         17       0       0       0       0       0       0
  2968 ;;      Totals:        17       0       0       0       0       0       0
  2969 ;;Total ram usage:       17 bytes
  2970 ;; Hardware stack levels used:    1
  2971 ;; Hardware stack levels required when called:    2
  2972 ;; This function calls:
  2973 ;;		Nothing
  2974 ;; This function is called by:
  2975 ;;		Interrupt level 1
  2976 ;; This function uses a non-reentrant model
  2977 ;;
  2978                           
  2979                           	psect	intcodelo
  2980  000018                     __pintcodelo:
  2981                           	opt stack 0
  2982  000018                     _low_isr:
  2983                           	opt stack 26
  2984                           
  2985                           ;incstack = 0
  2986  000018  805A               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  2987  00001A  CFD8 F014          	movff	status,??_low_isr
  2988  00001E  CFE8 F015          	movff	wreg,??_low_isr+1
  2989  000022  CFE0 F016          	movff	bsr,??_low_isr+2
  2990  000026  CFFA F017          	movff	pclath,??_low_isr+3
  2991  00002A  CFFB F018          	movff	pclatu,??_low_isr+4
  2992  00002E  CFE9 F019          	movff	fsr0l,??_low_isr+5
  2993  000032  CFEA F01A          	movff	fsr0h,??_low_isr+6
  2994  000036  CFE1 F01B          	movff	fsr1l,??_low_isr+7
  2995  00003A  CFE2 F01C          	movff	fsr1h,??_low_isr+8
  2996  00003E  CFD9 F01D          	movff	fsr2l,??_low_isr+9
  2997  000042  CFDA F01E          	movff	fsr2h,??_low_isr+10
  2998  000046  CFF3 F01F          	movff	prodl,??_low_isr+11
  2999  00004A  CFF4 F020          	movff	prodh,??_low_isr+12
  3000  00004E  CFF6 F021          	movff	tblptrl,??_low_isr+13
  3001  000052  CFF7 F022          	movff	tblptrh,??_low_isr+14
  3002  000056  CFF8 F023          	movff	tblptru,??_low_isr+15
  3003  00005A  CFF5 F024          	movff	tablat,??_low_isr+16
  3004                           
  3005                           ;main.c: 148: INTCONbits.GIEH = 0;
  3006  00005E  9EF2               	bcf	intcon,7,c	;volatile
  3007                           
  3008                           ;main.c: 150: INTCONbits.GIEH = 1;
  3009  000060  8EF2               	bsf	intcon,7,c	;volatile
  3010  000062  C024  FFF5         	movff	??_low_isr+16,tablat
  3011  000066  C023  FFF8         	movff	??_low_isr+15,tblptru
  3012  00006A  C022  FFF7         	movff	??_low_isr+14,tblptrh
  3013  00006E  C021  FFF6         	movff	??_low_isr+13,tblptrl
  3014  000072  C020  FFF4         	movff	??_low_isr+12,prodh
  3015  000076  C01F  FFF3         	movff	??_low_isr+11,prodl
  3016  00007A  C01E  FFDA         	movff	??_low_isr+10,fsr2h
  3017  00007E  C01D  FFD9         	movff	??_low_isr+9,fsr2l
  3018  000082  C01C  FFE2         	movff	??_low_isr+8,fsr1h
  3019  000086  C01B  FFE1         	movff	??_low_isr+7,fsr1l
  3020  00008A  C01A  FFEA         	movff	??_low_isr+6,fsr0h
  3021  00008E  C019  FFE9         	movff	??_low_isr+5,fsr0l
  3022  000092  C018  FFFB         	movff	??_low_isr+4,pclatu
  3023  000096  C017  FFFA         	movff	??_low_isr+3,pclath
  3024  00009A  C016  FFE0         	movff	??_low_isr+2,bsr
  3025  00009E  C015  FFE8         	movff	??_low_isr+1,wreg
  3026  0000A2  C014  FFD8         	movff	??_low_isr,status
  3027  0000A6  905A               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  3028  0000A8  0010               	retfie	
  3029  0000AA                     __end_of_low_isr:
  3030                           	opt stack 0
  3031                           pclatu	equ	0xFFB
  3032                           pclath	equ	0xFFA
  3033                           tblptru	equ	0xFF8
  3034                           tblptrh	equ	0xFF7
  3035                           tblptrl	equ	0xFF6
  3036                           tablat	equ	0xFF5
  3037                           prodh	equ	0xFF4
  3038                           prodl	equ	0xFF3
  3039                           intcon	equ	0xFF2
  3040                           postinc0	equ	0xFEE
  3041                           fsr0h	equ	0xFEA
  3042                           fsr0l	equ	0xFE9
  3043                           wreg	equ	0xFE8
  3044                           indf1	equ	0xFE7
  3045                           postinc1	equ	0xFE6
  3046                           postdec1	equ	0xFE5
  3047                           fsr1h	equ	0xFE2
  3048                           fsr1l	equ	0xFE1
  3049                           bsr	equ	0xFE0
  3050                           indf2	equ	0xFDF
  3051                           postinc2	equ	0xFDE
  3052                           postdec2	equ	0xFDD
  3053                           fsr2h	equ	0xFDA
  3054                           fsr2l	equ	0xFD9
  3055                           status	equ	0xFD8
  3056                           
  3057 ;; *************** function _high_isr *****************
  3058 ;; Defined at:
  3059 ;;		line 137 in file "main.c"
  3060 ;; Parameters:    Size  Location     Type
  3061 ;;		None
  3062 ;; Auto vars:     Size  Location     Type
  3063 ;;		None
  3064 ;; Return value:  Size  Location     Type
  3065 ;;                  1    wreg      void 
  3066 ;; Registers used:
  3067 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3068 ;; Tracked objects:
  3069 ;;		On entry : 0/0
  3070 ;;		On exit  : 0/0
  3071 ;;		Unchanged: 0/0
  3072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3073 ;;      Params:         0       0       0       0       0       0       0
  3074 ;;      Locals:         0       0       0       0       0       0       0
  3075 ;;      Temps:         14       0       0       0       0       0       0
  3076 ;;      Totals:        14       0       0       0       0       0       0
  3077 ;;Total ram usage:       14 bytes
  3078 ;; Hardware stack levels used:    1
  3079 ;; Hardware stack levels required when called:    1
  3080 ;; This function calls:
  3081 ;;		_uart_receiver
  3082 ;; This function is called by:
  3083 ;;		Interrupt level 2
  3084 ;; This function uses a non-reentrant model
  3085 ;;
  3086                           
  3087                           	psect	intcode
  3088  000008                     __pintcode:
  3089                           	opt stack 0
  3090  000008                     _high_isr:
  3091                           	opt stack 26
  3092                           
  3093                           ;incstack = 0
  3094  000008  825A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3095  00000A  ED92  F005         	call	int_func,f	;refresh shadow registers
  3096                           pclatu	equ	0xFFB
  3097                           pclath	equ	0xFFA
  3098                           tblptru	equ	0xFF8
  3099                           tblptrh	equ	0xFF7
  3100                           tblptrl	equ	0xFF6
  3101                           tablat	equ	0xFF5
  3102                           prodh	equ	0xFF4
  3103                           prodl	equ	0xFF3
  3104                           intcon	equ	0xFF2
  3105                           postinc0	equ	0xFEE
  3106                           fsr0h	equ	0xFEA
  3107                           fsr0l	equ	0xFE9
  3108                           wreg	equ	0xFE8
  3109                           indf1	equ	0xFE7
  3110                           postinc1	equ	0xFE6
  3111                           postdec1	equ	0xFE5
  3112                           fsr1h	equ	0xFE2
  3113                           fsr1l	equ	0xFE1
  3114                           bsr	equ	0xFE0
  3115                           indf2	equ	0xFDF
  3116                           postinc2	equ	0xFDE
  3117                           postdec2	equ	0xFDD
  3118                           fsr2h	equ	0xFDA
  3119                           fsr2l	equ	0xFD9
  3120                           status	equ	0xFD8
  3121                           
  3122                           	psect	intcode_body
  3123  000B24                     __pintcode_body:
  3124                           	opt stack 26
  3125  000B24                     int_func:
  3126                           	opt stack 26
  3127  000B24  0006               	pop		; remove dummy address from shadow register refresh
  3128  000B26  CFFA F006          	movff	pclath,??_high_isr
  3129  000B2A  CFFB F007          	movff	pclatu,??_high_isr+1
  3130  000B2E  CFE9 F008          	movff	fsr0l,??_high_isr+2
  3131  000B32  CFEA F009          	movff	fsr0h,??_high_isr+3
  3132  000B36  CFE1 F00A          	movff	fsr1l,??_high_isr+4
  3133  000B3A  CFE2 F00B          	movff	fsr1h,??_high_isr+5
  3134  000B3E  CFD9 F00C          	movff	fsr2l,??_high_isr+6
  3135  000B42  CFDA F00D          	movff	fsr2h,??_high_isr+7
  3136  000B46  CFF3 F00E          	movff	prodl,??_high_isr+8
  3137  000B4A  CFF4 F00F          	movff	prodh,??_high_isr+9
  3138  000B4E  CFF6 F010          	movff	tblptrl,??_high_isr+10
  3139  000B52  CFF7 F011          	movff	tblptrh,??_high_isr+11
  3140  000B56  CFF8 F012          	movff	tblptru,??_high_isr+12
  3141  000B5A  CFF5 F013          	movff	tablat,??_high_isr+13
  3142                           
  3143                           ;main.c: 138: INTCONbits.GIEH = 0;
  3144  000B5E  9EF2               	bcf	intcon,7,c	;volatile
  3145                           
  3146                           ;main.c: 139: if(PIR1bits.RCIF){
  3147  000B60  AA9E               	btfss	3998,5,c	;volatile
  3148  000B62  D00B               	goto	i2l1603
  3149                           
  3150                           ;main.c: 140: uart_receiver(&uart_data,&uart_got_data_bool);
  3151  000B64  0E55               	movlw	low _uart_data
  3152  000B66  6E01               	movwf	uart_receiver@c,c
  3153  000B68  0E00               	movlw	high _uart_data
  3154  000B6A  6E02               	movwf	uart_receiver@c+1,c
  3155  000B6C  0E54               	movlw	low _uart_got_data_bool
  3156  000B6E  6E03               	movwf	uart_receiver@rx_flag,c
  3157  000B70  0E00               	movlw	high _uart_got_data_bool
  3158  000B72  6E04               	movwf	uart_receiver@rx_flag+1,c
  3159  000B74  EC01  F007         	call	_uart_receiver	;wreg free
  3160                           
  3161                           ;main.c: 141: PIR1bits.RCIF=0;
  3162  000B78  9A9E               	bcf	3998,5,c	;volatile
  3163  000B7A                     i2l1603:
  3164                           
  3165                           ;main.c: 142: }
  3166                           ;main.c: 144: INTCONbits.GIEH = 1;
  3167  000B7A  8EF2               	bsf	intcon,7,c	;volatile
  3168  000B7C  C013  FFF5         	movff	??_high_isr+13,tablat
  3169  000B80  C012  FFF8         	movff	??_high_isr+12,tblptru
  3170  000B84  C011  FFF7         	movff	??_high_isr+11,tblptrh
  3171  000B88  C010  FFF6         	movff	??_high_isr+10,tblptrl
  3172  000B8C  C00F  FFF4         	movff	??_high_isr+9,prodh
  3173  000B90  C00E  FFF3         	movff	??_high_isr+8,prodl
  3174  000B94  C00D  FFDA         	movff	??_high_isr+7,fsr2h
  3175  000B98  C00C  FFD9         	movff	??_high_isr+6,fsr2l
  3176  000B9C  C00B  FFE2         	movff	??_high_isr+5,fsr1h
  3177  000BA0  C00A  FFE1         	movff	??_high_isr+4,fsr1l
  3178  000BA4  C009  FFEA         	movff	??_high_isr+3,fsr0h
  3179  000BA8  C008  FFE9         	movff	??_high_isr+2,fsr0l
  3180  000BAC  C007  FFFB         	movff	??_high_isr+1,pclatu
  3181  000BB0  C006  FFFA         	movff	??_high_isr,pclath
  3182  000BB4  925A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3183  000BB6  0011               	retfie		f
  3184  000BB8                     __end_of_high_isr:
  3185                           	opt stack 0
  3186                           pclatu	equ	0xFFB
  3187                           pclath	equ	0xFFA
  3188                           tblptru	equ	0xFF8
  3189                           tblptrh	equ	0xFF7
  3190                           tblptrl	equ	0xFF6
  3191                           tablat	equ	0xFF5
  3192                           prodh	equ	0xFF4
  3193                           prodl	equ	0xFF3
  3194                           intcon	equ	0xFF2
  3195                           postinc0	equ	0xFEE
  3196                           fsr0h	equ	0xFEA
  3197                           fsr0l	equ	0xFE9
  3198                           wreg	equ	0xFE8
  3199                           indf1	equ	0xFE7
  3200                           postinc1	equ	0xFE6
  3201                           postdec1	equ	0xFE5
  3202                           fsr1h	equ	0xFE2
  3203                           fsr1l	equ	0xFE1
  3204                           bsr	equ	0xFE0
  3205                           indf2	equ	0xFDF
  3206                           postinc2	equ	0xFDE
  3207                           postdec2	equ	0xFDD
  3208                           fsr2h	equ	0xFDA
  3209                           fsr2l	equ	0xFD9
  3210                           status	equ	0xFD8
  3211                           
  3212 ;; *************** function _uart_receiver *****************
  3213 ;; Defined at:
  3214 ;;		line 31 in file "uart_layer.c"
  3215 ;; Parameters:    Size  Location     Type
  3216 ;;  c               2    0[COMRAM] PTR unsigned char 
  3217 ;;		 -> uart_data(1), 
  3218 ;;  rx_flag         2    2[COMRAM] PTR unsigned char 
  3219 ;;		 -> uart_got_data_bool(1), 
  3220 ;; Auto vars:     Size  Location     Type
  3221 ;;  er              1    4[COMRAM] unsigned char 
  3222 ;; Return value:  Size  Location     Type
  3223 ;;                  1    wreg      void 
  3224 ;; Registers used:
  3225 ;;		wreg, fsr2l, fsr2h
  3226 ;; Tracked objects:
  3227 ;;		On entry : 0/0
  3228 ;;		On exit  : 0/0
  3229 ;;		Unchanged: 0/0
  3230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3231 ;;      Params:         4       0       0       0       0       0       0
  3232 ;;      Locals:         1       0       0       0       0       0       0
  3233 ;;      Temps:          0       0       0       0       0       0       0
  3234 ;;      Totals:         5       0       0       0       0       0       0
  3235 ;;Total ram usage:        5 bytes
  3236 ;; Hardware stack levels used:    1
  3237 ;; This function calls:
  3238 ;;		Nothing
  3239 ;; This function is called by:
  3240 ;;		_high_isr
  3241 ;; This function uses a non-reentrant model
  3242 ;;
  3243                           
  3244                           	psect	text20
  3245  000E02                     __ptext20:
  3246                           	opt stack 0
  3247  000E02                     _uart_receiver:
  3248                           	opt stack 26
  3249                           
  3250                           ;uart_layer.c: 33: if(RCSTAbits.FERR){
  3251                           
  3252                           ;incstack = 0
  3253  000E02  A4AB               	btfss	4011,2,c	;volatile
  3254  000E04  D003               	goto	i2l34
  3255                           
  3256                           ;uart_layer.c: 34: uint8_t er = RCREG;
  3257  000E06  CFAE F005          	movff	4014,uart_receiver@er	;volatile
  3258                           
  3259                           ;uart_layer.c: 35: }else if(RCSTAbits.OERR){
  3260  000E0A  0012               	return	
  3261  000E0C                     i2l34:
  3262  000E0C  A2AB               	btfss	4011,1,c	;volatile
  3263  000E0E  D003               	goto	i2l1311
  3264                           
  3265                           ;uart_layer.c: 36: RCSTAbits.CREN=0;
  3266  000E10  98AB               	bcf	4011,4,c	;volatile
  3267                           
  3268                           ;uart_layer.c: 37: RCSTAbits.CREN=1;
  3269  000E12  88AB               	bsf	4011,4,c	;volatile
  3270                           
  3271                           ;uart_layer.c: 38: }else{
  3272  000E14  0012               	return	
  3273  000E16                     i2l1311:
  3274                           
  3275                           ;uart_layer.c: 39: *c = RCREG;
  3276  000E16  C001  FFD9         	movff	uart_receiver@c,fsr2l
  3277  000E1A  C002  FFDA         	movff	uart_receiver@c+1,fsr2h
  3278  000E1E  CFAE FFDF          	movff	4014,indf2	;volatile
  3279                           
  3280                           ;uart_layer.c: 40: *rx_flag = 1;
  3281  000E22  C003  FFD9         	movff	uart_receiver@rx_flag,fsr2l
  3282  000E26  C004  FFDA         	movff	uart_receiver@rx_flag+1,fsr2h
  3283  000E2A  0E01               	movlw	1
  3284  000E2C  6EDF               	movwf	indf2,c
  3285  000E2E  0012               	return	
  3286  000E30                     __end_of_uart_receiver:
  3287                           	opt stack 0
  3288                           pclatu	equ	0xFFB
  3289                           pclath	equ	0xFFA
  3290                           tblptru	equ	0xFF8
  3291                           tblptrh	equ	0xFF7
  3292                           tblptrl	equ	0xFF6
  3293                           tablat	equ	0xFF5
  3294                           prodh	equ	0xFF4
  3295                           prodl	equ	0xFF3
  3296                           intcon	equ	0xFF2
  3297                           postinc0	equ	0xFEE
  3298                           fsr0h	equ	0xFEA
  3299                           fsr0l	equ	0xFE9
  3300                           wreg	equ	0xFE8
  3301                           indf1	equ	0xFE7
  3302                           postinc1	equ	0xFE6
  3303                           postdec1	equ	0xFE5
  3304                           fsr1h	equ	0xFE2
  3305                           fsr1l	equ	0xFE1
  3306                           bsr	equ	0xFE0
  3307                           indf2	equ	0xFDF
  3308                           postinc2	equ	0xFDE
  3309                           postdec2	equ	0xFDD
  3310                           fsr2h	equ	0xFDA
  3311                           fsr2l	equ	0xFD9
  3312                           status	equ	0xFD8
  3313                           pclatu	equ	0xFFB
  3314                           pclath	equ	0xFFA
  3315                           tblptru	equ	0xFF8
  3316                           tblptrh	equ	0xFF7
  3317                           tblptrl	equ	0xFF6
  3318                           tablat	equ	0xFF5
  3319                           prodh	equ	0xFF4
  3320                           prodl	equ	0xFF3
  3321                           intcon	equ	0xFF2
  3322                           postinc0	equ	0xFEE
  3323                           fsr0h	equ	0xFEA
  3324                           fsr0l	equ	0xFE9
  3325                           wreg	equ	0xFE8
  3326                           indf1	equ	0xFE7
  3327                           postinc1	equ	0xFE6
  3328                           postdec1	equ	0xFE5
  3329                           fsr1h	equ	0xFE2
  3330                           fsr1l	equ	0xFE1
  3331                           bsr	equ	0xFE0
  3332                           indf2	equ	0xFDF
  3333                           postinc2	equ	0xFDE
  3334                           postdec2	equ	0xFDD
  3335                           fsr2h	equ	0xFDA
  3336                           fsr2l	equ	0xFD9
  3337                           status	equ	0xFD8
  3338                           
  3339                           	psect	rparam
  3340  0000                     pclatu	equ	0xFFB
  3341                           pclath	equ	0xFFA
  3342                           tblptru	equ	0xFF8
  3343                           tblptrh	equ	0xFF7
  3344                           tblptrl	equ	0xFF6
  3345                           tablat	equ	0xFF5
  3346                           prodh	equ	0xFF4
  3347                           prodl	equ	0xFF3
  3348                           intcon	equ	0xFF2
  3349                           postinc0	equ	0xFEE
  3350                           fsr0h	equ	0xFEA
  3351                           fsr0l	equ	0xFE9
  3352                           wreg	equ	0xFE8
  3353                           indf1	equ	0xFE7
  3354                           postinc1	equ	0xFE6
  3355                           postdec1	equ	0xFE5
  3356                           fsr1h	equ	0xFE2
  3357                           fsr1l	equ	0xFE1
  3358                           bsr	equ	0xFE0
  3359                           indf2	equ	0xFDF
  3360                           postinc2	equ	0xFDE
  3361                           postdec2	equ	0xFDD
  3362                           fsr2h	equ	0xFDA
  3363                           fsr2l	equ	0xFD9
  3364                           status	equ	0xFD8
  3365                           
  3366                           	psect	temp
  3367  00005A                     btemp:
  3368                           	opt stack 0
  3369  00005A                     	ds	1
  3370  0000                     int$flags	set	btemp
  3371                           pclatu	equ	0xFFB
  3372                           pclath	equ	0xFFA
  3373                           tblptru	equ	0xFF8
  3374                           tblptrh	equ	0xFF7
  3375                           tblptrl	equ	0xFF6
  3376                           tablat	equ	0xFF5
  3377                           prodh	equ	0xFF4
  3378                           prodl	equ	0xFF3
  3379                           intcon	equ	0xFF2
  3380                           postinc0	equ	0xFEE
  3381                           fsr0h	equ	0xFEA
  3382                           fsr0l	equ	0xFE9
  3383                           wreg	equ	0xFE8
  3384                           indf1	equ	0xFE7
  3385                           postinc1	equ	0xFE6
  3386                           postdec1	equ	0xFE5
  3387                           fsr1h	equ	0xFE2
  3388                           fsr1l	equ	0xFE1
  3389                           bsr	equ	0xFE0
  3390                           indf2	equ	0xFDF
  3391                           postinc2	equ	0xFDE
  3392                           postdec2	equ	0xFDD
  3393                           fsr2h	equ	0xFDA
  3394                           fsr2l	equ	0xFD9
  3395                           status	equ	0xFD8


Data Sizes:
    Strings     35
    Constant    10
    Data        4
    BSS         531
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     66      89
    BANK0           128     16      16
    BANK1           256      0     256
    BANK2           256      0     256
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    memcpy@d1	PTR void  size(2) Largest target is 1
		 -> main@acc(BANK0[1]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 1
		 -> main@acc(BANK0[1]), 

    memcpy@s1	PTR const void  size(2) Largest target is 1
		 -> ext_eeprom_acc(COMRAM[1]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 1
		 -> ext_eeprom_acc(COMRAM[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_2(CODE[19]), STR_1(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 256
		 -> print_buffer(BANK1[256]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sp__memcpy	PTR void  size(2) Largest target is 1
		 -> main@acc(BANK0[1]), 

    uart_send_string@c	PTR unsigned char  size(2) Largest target is 256
		 -> print_buffer(BANK1[256]), 

    uart_receiver@rx_flag	PTR unsigned char  size(2) Largest target is 1
		 -> uart_got_data_bool(COMRAM[1]), 

    uart_receiver@c	PTR unsigned char  size(2) Largest target is 1
		 -> uart_data(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _uart_send_string->_uart_send
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _rand->___lmul
    _i2c_write->_i2c_is_idle
    _i2c_stop->_i2c_is_idle
    _i2c_start->_i2c_is_idle
    _i2c_rep_start->_i2c_is_idle
    _i2c_read->_i2c_is_idle

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_uart_receiver

Critical Paths under _main in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0    5108
                                             64 COMRAM     2     2      0
                                              0 BANK0     16    16      0
                           _i2c_init
                           _i2c_read
                      _i2c_rep_start
                          _i2c_start
                           _i2c_stop
                          _i2c_write
                             _memcpy
                               _rand
                            _sprintf
                              _srand
                          _uart_init
                   _uart_send_string
 ---------------------------------------------------------------------------------
 (1) _uart_send_string                                     3     1      2     315
                                             37 COMRAM     3     1      2
                          _uart_send
 ---------------------------------------------------------------------------------
 (2) _uart_send                                            1     1      0      31
                                             36 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _uart_init                                            8     0      8     463
                                             36 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (1) _srand                                                2     0      2     108
                                             36 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             25    17      8    1785
                                             48 COMRAM    16     8      8
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                             43 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     395
                                             36 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _rand                                                 2     0      2     404
                                             48 COMRAM     2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     404
                                             36 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) _memcpy                                              10     4      6     867
                                             36 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (1) _i2c_write                                            1     1      0      31
                                             37 COMRAM     1     1      0
                        _i2c_is_idle
 ---------------------------------------------------------------------------------
 (1) _i2c_stop                                             0     0      0       0
                        _i2c_is_idle
 ---------------------------------------------------------------------------------
 (1) _i2c_start                                            0     0      0       0
                        _i2c_is_idle
 ---------------------------------------------------------------------------------
 (1) _i2c_rep_start                                        0     0      0       0
                        _i2c_is_idle
 ---------------------------------------------------------------------------------
 (1) _i2c_read                                             1     1      0      31
                                             37 COMRAM     1     1      0
                        _i2c_is_idle
 ---------------------------------------------------------------------------------
 (2) _i2c_is_idle                                          1     1      0       0
                                             36 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _i2c_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _low_isr                                             17    17      0       0
                                             19 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _high_isr                                            14    14      0     173
                                              5 COMRAM    14    14      0
                      _uart_receiver
 ---------------------------------------------------------------------------------
 (5) _uart_receiver                                        5     1      4     173
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _i2c_init
   _i2c_read
     _i2c_is_idle
   _i2c_rep_start
     _i2c_is_idle
   _i2c_start
     _i2c_is_idle
   _i2c_stop
     _i2c_is_idle
   _i2c_write
     _i2c_is_idle
   _memcpy
   _rand
     ___lmul
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
   _srand
   _uart_init
   _uart_send_string
     _uart_send

 _low_isr (ROOT)

 _high_isr (ROOT)
   _uart_receiver

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0     100       7      100.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     10      10       5       12.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     42      59       1       70.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     269      15        0.0%
DATA                 0      0     269       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sun Nov 25 01:55:42 2018

 __end_of_uart_send_string 0DCC                _SSPSTATbits 000FC7                         l28 0E92  
                       l29 0E90                         bsr 000FE0                __CFG_BORV$3 000000  
             __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000  
             __CFG_CP3$OFF 000000                        l111 0674                        l130 09B4  
                      l176 0E6C                        l185 0E38                        l179 0E70  
                      l622 0CB8                        l632 0D4C               __CFG_CPB$OFF 000000  
             __CFG_CPD$OFF 000000            ??_uart_receiver 0005                        wreg 000FE8  
             __CFG_LVP$OFF 000000               __CFG_WDT$OFF 000000                       l1701 09E6  
                     l1615 0C2A                       l1631 0C8E                       l1609 0E76  
                     l1641 0CAE                       l1633 0C92                       l1713 0A2A  
                     l1619 0C3E                       l1651 0D2A                       l1723 0A52  
                     l1707 0A00                       l1629 0C86                       l1653 0D2E  
                     l1725 0A56                       l1751 0AF6                       l1743 0A9E  
                     l1657 0D42                       l1649 0D22                       l1745 0AA4  
                     l1737 0A82                       l1753 0AFE                       l1905 0870  
                     l1755 0B16                       l1685 0D9C                       l1941 092A  
                     l1861 0784                       l1853 0736                       l1845 0716  
                     l1775 0D84                       l1927 08E4                       l1769 0D68  
                     l1689 0DB4                       l1937 0912                       l1955 09B6  
                     l1963 09CC                       l1885 0820                       l1869 07B4  
                     l1893 083A                       l1959 09BE                       l1879 0812  
                     l1899 0852                       STR_1 061E                       STR_2 060B  
                     u1105 0DF8                       u1106 0DFA                       u1340 086E  
                     u1245 0E44                       u1085 0DE4                       u1246 0E46  
                     u1086 0DE6                       u1270 0734                       _LATB 000F8A  
                     u1095 0DEE                       u1096 0DF0                       u1427 06D0  
                     u1437 082A                       i2l34 0E0C                       _main 0630  
                     _rand 0CC2                       fsr0h 000FEA                       fsr1h 000FE2  
                     fsr2h 000FDA                       fsr0l 000FE9                       indf1 000FE7  
                     indf2 000FDF                       fsr1l 000FE1                       fsr2l 000FD9  
                     btemp 005A              ??_i2c_is_idle 0025                       prodh 000FF4  
                     prodl 000FF3                       start 00AA              __CFG_IESO$OFF 000000  
         _block_sample_pos 004B              __CFG_MCLRE$ON 000000               ___param_bank 000000  
            _i2c_rep_start 0EB6                      ?_main 0001                      ?_rand 0031  
              i2c_read@ack 0026            __end_of___lwdiv 0CC2            __end_of___lwmod 0D56  
                    _RCREG 000FAE                      _SPBRG 000FAF                      _TRISB 000F93  
                    _TXREG 000FAD              __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000  
            __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000        ___lmul@multiplicand 0029  
            __CFG_WRT3$OFF 000000             __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000  
           __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000  
            __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000  
           __CFG_EBTRB$OFF 000000            __end_of_dpowers 060B                      _randx 0056  
                    _srand 0E98                      main@i 008C                      main@j 0089  
                    main@k 0081                      main@l 008E                      main@u 0086  
          __end_of_low_isr 00AA             __CFG_BOREN$OFF 000000                      pclath 000FFA  
                    tablat 000FF5                      status 000FD8            __end_of_sprintf 0B24  
          __initialization 0BB8             ?_i2c_rep_start 0001               __end_of_main 09DC  
             __end_of_rand 0D14           __end_of_i2c_init 0E62           __end_of_i2c_read 0E4A  
      __end_of_i2c_is_idle 0E88           __end_of_i2c_stop 0EAE                     ??_main 0041  
                   ??_rand 0033              __activetblptr 000002                     ?_srand 0025  
                   i2l1311 0E16                     i2l1603 0B7A                     _SPBRGH 000FB0  
                   _SSPADD 000FC8                     _SSPBUF 000FC9         __size_of_i2c_start 0008  
       __size_of_i2c_write 0014             __CFG_XINST$OFF 000000           __end_of_high_isr 0BB8  
                   ___lmul 0C1A             __CFG_STVREN$ON 000000                  ??___lwdiv 0029  
                ??___lwmod 0030                     _memcpy 0D56                     clear_0 0BE0  
                   clear_1 0BF4                     clear_2 0C06               __pdataCOMRAM 0056  
             __mediumconst 0000                  ??_low_isr 0014                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8                     srand@x 0025  
                ??_sprintf 0039                 __accesstop 0080    __end_of__initialization 0C0C  
          __CFG_PBADEN$OFF 000000              ___rparam_used 000001            ??_i2c_rep_start 0026  
              _i2c_is_idle 0E76             __pcstackCOMRAM 0001              __end_of_srand 0EA6  
        ?_uart_send_string 0026         ??_uart_send_string 0028          __end_of_i2c_start 0EB6  
        __end_of_i2c_write 0E76                    ??_srand 0027                 __pbssBANK1 0100  
               __pbssBANK2 0200                  ?_i2c_init 0001                  ?_i2c_read 0001  
                ?_i2c_stop 0001                    ?___lmul 0025                 _block_buff 0200  
                  ?_memcpy 0025             ___lmul@product 002D         __size_of_uart_init 0036  
       __size_of_uart_send 0010      __end_of_uart_receiver 0E30                    _SSPCON2 000FC5  
                ?_high_isr 0001                    _SSPSTAT 000FC7               _block_sample 0043  
               ??_i2c_init 0025                 ??_i2c_read 0026                 ??_i2c_stop 0026  
                  __Hparam 0000                    __Lparam 0000            __size_of___lmul 0056  
                  ___lwdiv 0C70                    ___lwmod 0D14               __psmallconst 0600  
                  __pcinit 0BB8            __size_of_memcpy 0040                    __ramtop 0600  
                  __ptext0 0630                    __ptext1 0D96                    __ptext2 0E88  
                  __ptext3 0DCC                    __ptext4 0E98                    __ptext5 09DC  
                  __ptext6 0D14                    __ptext7 0C70                    __ptext8 0CC2  
                  __ptext9 0C1A                    _dpowers 0601          uart_send_string@c 0026  
        uart_send_string@z 0028                    _low_isr 0018                    main@acc 008B  
                  _sprintf 09DC                    main@ran 0088                 ??_high_isr 0006  
           __pintcode_body 0B24       end_of_initialization 0C0C                    memcpy@d 002B  
                  memcpy@n 0029                    memcpy@s 002D              __Lmediumconst 0000  
                  int_func 0B24          __end_of_uart_init 0E02          __end_of_uart_send 0E98  
         uart_init@gen_reg 0025                  _RCSTAbits 000FAB                    postdec1 000FE5  
                  postdec2 000FDD                    postinc0 000FEE                    postinc1 000FE6  
                  postinc2 000FDE                  _TRISCbits 000F94                  _TRISDbits 000F95  
                _TXSTAbits 000FAC               ?_i2c_is_idle 0001             __end_of___lmul 0C70  
              _BAUDCONbits 000FB8              __pidataCOMRAM 0EBE             __end_of_memcpy 0D96  
      start_initialization 0BB8                  _i2c_start 0EAE                  _i2c_write 0E62  
__size_of_uart_send_string 0036           __CFG_OSC$INTIO67 000000          __size_of_i2c_init 0018  
        __size_of_i2c_read 001A          __size_of_i2c_stop 0008      __end_of_i2c_rep_start 0EBE  
                 ??___lmul 002D           __CFG_LPT1OSC$OFF 000000                   ??_memcpy 002B  
              __pbssCOMRAM 0043              __pcstackBANK0 0080                 ?_i2c_start 0001  
               ?_i2c_write 0001       uart_receiver@rx_flag 0003          __size_of_high_isr 0BB0  
              sprintf@flag 003C                sprintf@prec 003D         _uart_got_data_bool 0054  
         ___lwdiv@dividend 0025          __CFG_CCP2MX$PORTC 000000                  __pintcode 0008  
                 ?___lwdiv 0025                   ?___lwmod 002C                __pintcodelo 0018  
              __smallconst 0600                   ?_low_isr 0001           ___lwdiv@quotient 002A  
                 ?_sprintf 0031             __size_of_srand 000E                   _LATDbits 000F8C  
                 _IPR1bits 000F9F                   _PIE1bits 000F9D                   _PIR1bits 000F9E  
                 _RCONbits 000FD0       __size_of_i2c_is_idle 0012           __CFG_WDTPS$32768 000000  
                _uart_data 0055                  _uart_init 0DCC                  _uart_send 0E88  
   __size_of_uart_receiver 002E                 uart_send@c 0025                ??_i2c_start 0026  
              ??_i2c_write 0026          ___lmul@multiplier 0025                  copy_data0 0BCC  
         _uart_send_string 0D96                   _i2c_init 0E4A                   _i2c_read 0E30  
                 _i2c_stop 0EA6                   __Hrparam 0000                   __Lrparam 0000  
          uart_receiver@er 0005                 ?_uart_init 0025                 ?_uart_send 0001  
         __size_of___lwdiv 0052           __size_of___lwmod 0042             _ext_eeprom_acc 0053  
               sprintf@val 003E            ___lwdiv@divisor 0027            ___lwdiv@counter 0029  
         __size_of_low_isr 0092                   __ptext10 0D56                   __ptext11 0E62  
                 __ptext20 0E02                   __ptext12 0EA6                   __ptext13 0EAE  
                 __ptext14 0EB6                   __ptext15 0E30                   __ptext16 0E76  
                 __ptext17 0E4A              _uart_receiver 0E02                   _high_isr 0008  
         __size_of_sprintf 0148              __size_of_main 03AC              __size_of_rand 0052  
           uart_init@brg16 002B                   int$flags 005A                   main@addr 0080  
                 main@last 0082          i2c_write@i2c_data 0026                 _INTCONbits 000FF2  
                 memcpy@d1 0025                   memcpy@s1 0027             uart_receiver@c 0001  
           ?_uart_receiver 0001                   intlevel1 0000                   intlevel2 0000  
                sprintf@ap 003A                  sprintf@sp 0031           ___lwmod@dividend 002C  
               _OSCCONbits 000FD3              uart_init@brgh 0029              uart_init@sync 0027  
              ??_uart_init 002D                ??_uart_send 0025                   sprintf@c 0040  
                 sprintf@f 0033            ___lwmod@divisor 002E            ___lwmod@counter 0030  
             _print_buffer 0100                _SSPCON1bits 000FC6                _SSPCON2bits 000FC5  
   __size_of_i2c_rep_start 0008  
